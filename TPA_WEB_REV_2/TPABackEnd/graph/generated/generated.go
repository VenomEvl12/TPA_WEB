// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"TPABackEnd/graph/model"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Channel() ChannelResolver
	ChannelCommunity() ChannelCommunityResolver
	Mutation() MutationResolver
	Query() QueryResolver
	ReplyReplies() ReplyRepliesResolver
	Video() VideoResolver
	VideoReply() VideoReplyResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Channel struct {
		ChannelBanner      func(childComplexity int) int
		ChannelDescription func(childComplexity int) int
		ChannelID          func(childComplexity int) int
		ChannelImage       func(childComplexity int) int
		Location           func(childComplexity int) int
		UserID             func(childComplexity int) int
		Videos             func(childComplexity int) int
		ViewCount          func(childComplexity int) int
	}

	ChannelCommunity struct {
		ChannelID      func(childComplexity int) int
		ComDescription func(childComplexity int) int
		CommunityID    func(childComplexity int) int
		Day            func(childComplexity int) int
		Dislike        func(childComplexity int) int
		Like           func(childComplexity int) int
		Month          func(childComplexity int) int
		User           func(childComplexity int) int
		Year           func(childComplexity int) int
	}

	ChannelCommunityVali struct {
		CommunityID     func(childComplexity int) int
		CommunityValiID func(childComplexity int) int
		Dislike         func(childComplexity int) int
		Like            func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	Mutation struct {
		CreateChannel                      func(childComplexity int, input *model.NewChannel) int
		CreateChannelCommunities           func(childComplexity int, input model.NewChannelCommunity) int
		CreateChannelCommunityVali         func(childComplexity int, input *model.NewchannelCommunityVali) int
		CreateChannelLink                  func(childComplexity int, input model.NewChannelLink) int
		CreateNewVideoReplyLikeVali        func(childComplexity int, input model.NewVideoReplyLikeVali) int
		CreateNewVideoReplyRepliesLikeVali func(childComplexity int, input *model.NewVideoReplyRepliesLikeVali) int
		CreatePlaylist                     func(childComplexity int, input model.NewPlaylist) int
		CreatePlaylistSub                  func(childComplexity int, input model.NewPlaylistSubscribe) int
		CreateReplyReplies                 func(childComplexity int, input model.NewReplyReplies) int
		CreateUser                         func(childComplexity int, input *model.NewUser) int
		CreateUserSubscribe                func(childComplexity int, input *model.NewUserSubscribe) int
		CreateVideo                        func(childComplexity int, input *model.NewVideo) int
		CreateVideoLikeVali                func(childComplexity int, input *model.NewVideoLikeVali) int
		CreateVideoReply                   func(childComplexity int, input model.NewVideoReply) int
		DeleteAllChannelLink               func(childComplexity int, userID string) int
		DeleteAllPlaylistSubs              func(childComplexity int, playlistID string) int
		DeleteChannel                      func(childComplexity int, channelID string) int
		DeleteChannelCommunities           func(childComplexity int, communityID string) int
		DeleteChannelCommunityVali         func(childComplexity int, communityID string) int
		DeleteChannelLink                  func(childComplexity int, channelLinkID string, userID string) int
		DeleteListVideoReplyReplyLikeVali  func(childComplexity int, videoID string, replyID string) int
		DeletePlaylist                     func(childComplexity int, playlistID string, userID string) int
		DeletePlaylistSub                  func(childComplexity int, userID string, playlistID string) int
		DeleteReply                        func(childComplexity int, replyID string) int
		DeleteReplyReplies                 func(childComplexity int, replyRepliesID string) int
		DeleteUserSubscribe                func(childComplexity int, userID string, channelID string) int
		DeleteVideo                        func(childComplexity int, playlistID string, userID string, videoID string) int
		DeleteVideoLikeVali                func(childComplexity int, videoID string) int
		DeleteVideoReplyLikeVali           func(childComplexity int, videoID string, replyID string) int
		DeleteVideoReplyRepliesLikeVali    func(childComplexity int, videoReplyRepliesLikeValiID string) int
		InputVideoToPlayList               func(childComplexity int, input model.NewVideoToPlaylist) int
		RemoveVideo                        func(childComplexity int, videoID string) int
		UpdateChannelBanner                func(childComplexity int, channelID string, channelBanner string) int
		UpdateChannelCommunitiesDislike    func(childComplexity int, communityID string, dislike bool) int
		UpdateChannelCommunitiesLike       func(childComplexity int, communityID string, like bool) int
		UpdateChannelCommunityValiDislike  func(childComplexity int, communityValiID string) int
		UpdateChannelCommunityValiLike     func(childComplexity int, communityValiID string) int
		UpdateChannelDescription           func(childComplexity int, channelID string, description string) int
		UpdateChannelImage                 func(childComplexity int, channelID string, channelImage string) int
		UpdateChannelLink                  func(childComplexity int, channelLinkID string, userID string, link string) int
		UpdateChannelLocation              func(childComplexity int, channelID string, location string) int
		UpdateChannelView                  func(childComplexity int, channelID string, viewCount int) int
		UpdateDescription                  func(childComplexity int, videoID string, descriptions *string) int
		UpdateDislike                      func(childComplexity int, videoID string, likeVal bool) int
		UpdateLike                         func(childComplexity int, videoID string, likeVal bool) int
		UpdateLocation                     func(childComplexity int, id string, location string) int
		UpdatePlayListDescription          func(childComplexity int, playlistID string, userID string, description string) int
		UpdatePlayListHeader               func(childComplexity int, playlistID string, userID string, header string) int
		UpdatePlayListViews                func(childComplexity int, playlistID string, userID string) int
		UpdatePlaylistSub                  func(childComplexity int, userID string, playlistID string) int
		UpdatePlaylistType                 func(childComplexity int, playlistID string, userID string, tipe bool) int
		UpdatePremium                      func(childComplexity int, id string, premium bool) int
		UpdatePremiumCountDay              func(childComplexity int, id string, premiumDayCount int) int
		UpdatePremiumVideo                 func(childComplexity int, videoID string, premium *bool) int
		UpdatePriorityWeight               func(childComplexity int, playlistID string, userID string, videoID string, priorityWeight int) int
		UpdateReplyDescription             func(childComplexity int, replyID string, description string) int
		UpdateReplyDislikes                func(childComplexity int, replyID string, dislike bool) int
		UpdateReplyLikes                   func(childComplexity int, replyID string, like bool) int
		UpdateReplyRepliesDislikes         func(childComplexity int, replyRepliesID string, dislike bool) int
		UpdateReplyRepliesLikes            func(childComplexity int, replyRepliesID string, like bool) int
		UpdateRestriction                  func(childComplexity int, videoID string, restriction *bool) int
		UpdateRestrictionUser              func(childComplexity int, id string, restriction bool) int
		UpdateSubscribers                  func(childComplexity int, id string, subscribe bool) int
		UpdateUserSubscribe                func(childComplexity int, userID string, channelID string) int
		UpdateVideReplyRepliesLikeVali     func(childComplexity int, videoReplyRepliesLikeValiID string, userID string, replyID string, videoID string, replyRepliesID string) int
		UpdateVideo                        func(childComplexity int, videoID string, desc string, title string, thumbnail string, privacy bool) int
		UpdateVideoDislikeVali             func(childComplexity int, videoID string, userID string) int
		UpdateVideoLikeVali                func(childComplexity int, videoID string, userID string) int
		UpdateVideoReplyDislikeVali        func(childComplexity int, userID string, videoID string, replyID *string) int
		UpdateVideoReplyLikeVali           func(childComplexity int, userID string, videoID string, replyID string) int
		UpdateVideoReplyRepliesDislikeVali func(childComplexity int, videoReplyRepliesLikeValiID string, userID string, replyID string, videoID string, replyRepliesID string) int
		UpdateVideoType                    func(childComplexity int, videoID string, typePub bool) int
		UpdateViews                        func(childComplexity int, videoID string) int
	}

	Playlist struct {
		DateAddToPlaylist func(childComplexity int) int
		DatePublish       func(childComplexity int) int
		Description       func(childComplexity int) int
		PlaylistHeader    func(childComplexity int) int
		PlaylistID        func(childComplexity int) int
		PlaylistType      func(childComplexity int) int
		PriorityWeight    func(childComplexity int) int
		TotalVideo        func(childComplexity int) int
		UserID            func(childComplexity int) int
		VideoID           func(childComplexity int) int
		Views             func(childComplexity int) int
	}

	Query struct {
		ChannelCommunities        func(childComplexity int, channelID string) int
		ChannelCommunity          func(childComplexity int, communityID string) int
		ChannelCommunityVali      func(childComplexity int, communityValiID string, communityID string, userID string) int
		ChannelSubscribe          func(childComplexity int, channelID string) int
		GetChannel                func(childComplexity int, userID string) int
		GetChannelID              func(childComplexity int, channelID string) int
		GetChannelSubscribe       func(childComplexity int, userID string) int
		GetFiveRandomVideos       func(childComplexity int, userID string, restriction bool, premium bool) int
		GetLastVideos             func(childComplexity int, userID string, premium bool, restriction bool) int
		GetUserByKeyword          func(childComplexity int, keyword string) int
		GetVideoByKeyword         func(childComplexity int, keyword string) int
		GetVideoByKeywordTopFive  func(childComplexity int, keyword string) int
		ListReplyReply            func(childComplexity int, replyID string) int
		ListUsers                 func(childComplexity int) int
		ListVideos                func(childComplexity int) int
		Playlist                  func(childComplexity int, playlistID string) int
		PlaylistListVideos        func(childComplexity int, playlistID string) int
		Playlists                 func(childComplexity int, userID string) int
		PlaylistsByKeyword        func(childComplexity int, keyword string) int
		PlaylistsPublic           func(childComplexity int, userID string) int
		PlaylistsRandom           func(childComplexity int, userID string) int
		PremiumVideos             func(childComplexity int) int
		PriorityNumber            func(childComplexity int, playlistID string) int
		ReplyReply                func(childComplexity int, replyRepliesID string) int
		RetrieveAllPlaylistSubs   func(childComplexity int, userID string) int
		RetrieveAllVideos         func(childComplexity int, userID string) int
		RetrieveLinks             func(childComplexity int, userID string) int
		RetrievePlaylistSub       func(childComplexity int, userID string, playlistID string) int
		UserByID                  func(childComplexity int, id string) int
		UserSubscribes            func(childComplexity int, userID string) int
		Users                     func(childComplexity int, email string) int
		VideoByCategory           func(childComplexity int, category string, restriction bool, premium bool) int
		VideoByLocation           func(childComplexity int, location string, restriction bool, premium bool) int
		VideoByLocationSort       func(childComplexity int, restriction bool, premium bool) int
		VideoByUser               func(childComplexity int, userID string, restriction bool, premium bool) int
		VideoLikeVali             func(childComplexity int, userID string, videoID string) int
		VideoReplies              func(childComplexity int, videoID string) int
		VideoReply                func(childComplexity int, userID string, videoID string) int
		VideoReplyLikeVali        func(childComplexity int, userID string, videoID string, replyID string) int
		VideoReplyRepliesLikeVali func(childComplexity int, videoReplyRepliesLikeValiID string) int
		VideoTotalViews           func(childComplexity int, userID string) int
		Videos                    func(childComplexity int, videoID string) int
	}

	ReplyReplies struct {
		Day            func(childComplexity int) int
		Description    func(childComplexity int) int
		Dislike        func(childComplexity int) int
		Like           func(childComplexity int) int
		Month          func(childComplexity int) int
		ReplyID        func(childComplexity int) int
		ReplyRepliesID func(childComplexity int) int
		User           func(childComplexity int) int
		Year           func(childComplexity int) int
	}

	User struct {
		Date            func(childComplexity int) int
		Email           func(childComplexity int) int
		ID              func(childComplexity int) int
		Location        func(childComplexity int) int
		Premium         func(childComplexity int) int
		PremiumDayCount func(childComplexity int) int
		Restriction     func(childComplexity int) int
		Subscribers     func(childComplexity int) int
		Thumbnail       func(childComplexity int) int
		Username        func(childComplexity int) int
	}

	Video struct {
		Category     func(childComplexity int) int
		Day          func(childComplexity int) int
		Descriptions func(childComplexity int) int
		Dislike      func(childComplexity int) int
		Like         func(childComplexity int) int
		Location     func(childComplexity int) int
		Month        func(childComplexity int) int
		Premium      func(childComplexity int) int
		Restriction  func(childComplexity int) int
		SourceLink   func(childComplexity int) int
		Thumbnail    func(childComplexity int) int
		Title        func(childComplexity int) int
		TypePub      func(childComplexity int) int
		User         func(childComplexity int) int
		VideoID      func(childComplexity int) int
		VideoLength  func(childComplexity int) int
		VideoReply   func(childComplexity int) int
		Views        func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	VideoLikeVali struct {
		Dislike func(childComplexity int) int
		Like    func(childComplexity int) int
		UserID  func(childComplexity int) int
		VideoID func(childComplexity int) int
	}

	VideoReply struct {
		Day          func(childComplexity int) int
		Description  func(childComplexity int) int
		Dislikes     func(childComplexity int) int
		Likes        func(childComplexity int) int
		Month        func(childComplexity int) int
		ReplyID      func(childComplexity int) int
		ReplyReplies func(childComplexity int) int
		User         func(childComplexity int) int
		VideoID      func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	VideoReplyLikeVali struct {
		Dislike func(childComplexity int) int
		Like    func(childComplexity int) int
		ReplyID func(childComplexity int) int
		UserID  func(childComplexity int) int
		VideoID func(childComplexity int) int
	}

	VideoReplyRepliesLikeVali struct {
		Dislike                     func(childComplexity int) int
		Like                        func(childComplexity int) int
		ReplyID                     func(childComplexity int) int
		ReplyRepliesID              func(childComplexity int) int
		UserID                      func(childComplexity int) int
		VideoID                     func(childComplexity int) int
		VideoReplyRepliesLikeValiID func(childComplexity int) int
	}

	ChannelLink struct {
		ChannelLinkID func(childComplexity int) int
		Link          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	PlaylistSubscribe struct {
		PlaylistID func(childComplexity int) int
		Subscribe  func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UserSubscribe struct {
		ChannelID     func(childComplexity int) int
		ChannelUserID func(childComplexity int) int
		Subscribe     func(childComplexity int) int
		UserID        func(childComplexity int) int
	}
}

type ChannelResolver interface {
	Videos(ctx context.Context, obj *model.Channel) ([]*model.Video, error)
}
type ChannelCommunityResolver interface {
	User(ctx context.Context, obj *model.ChannelCommunity) (*model.User, error)
}
type MutationResolver interface {
	CreatePlaylistSub(ctx context.Context, input model.NewPlaylistSubscribe) (*model.PlaylistSubscribe, error)
	UpdatePlaylistSub(ctx context.Context, userID string, playlistID string) (*model.PlaylistSubscribe, error)
	DeletePlaylistSub(ctx context.Context, userID string, playlistID string) (bool, error)
	DeleteAllPlaylistSubs(ctx context.Context, playlistID string) (bool, error)
	CreateChannel(ctx context.Context, input *model.NewChannel) (*model.Channel, error)
	UpdateChannelView(ctx context.Context, channelID string, viewCount int) (*model.Channel, error)
	UpdateChannelLocation(ctx context.Context, channelID string, location string) (*model.Channel, error)
	UpdateChannelDescription(ctx context.Context, channelID string, description string) (*model.Channel, error)
	UpdateChannelImage(ctx context.Context, channelID string, channelImage string) (*model.Channel, error)
	UpdateChannelBanner(ctx context.Context, channelID string, channelBanner string) (*model.Channel, error)
	DeleteChannel(ctx context.Context, channelID string) (*bool, error)
	CreateChannelCommunities(ctx context.Context, input model.NewChannelCommunity) (*model.ChannelCommunity, error)
	UpdateChannelCommunitiesLike(ctx context.Context, communityID string, like bool) (*model.ChannelCommunity, error)
	UpdateChannelCommunitiesDislike(ctx context.Context, communityID string, dislike bool) (*model.ChannelCommunity, error)
	DeleteChannelCommunities(ctx context.Context, communityID string) (bool, error)
	CreateChannelCommunityVali(ctx context.Context, input *model.NewchannelCommunityVali) (*model.ChannelCommunityVali, error)
	UpdateChannelCommunityValiLike(ctx context.Context, communityValiID string) (*model.ChannelCommunityVali, error)
	UpdateChannelCommunityValiDislike(ctx context.Context, communityValiID string) (*model.ChannelCommunityVali, error)
	DeleteChannelCommunityVali(ctx context.Context, communityID string) (*bool, error)
	CreateChannelLink(ctx context.Context, input model.NewChannelLink) (*model.ChannelLink, error)
	UpdateChannelLink(ctx context.Context, channelLinkID string, userID string, link string) (*model.ChannelLink, error)
	DeleteChannelLink(ctx context.Context, channelLinkID string, userID string) (bool, error)
	DeleteAllChannelLink(ctx context.Context, userID string) (bool, error)
	CreatePlaylist(ctx context.Context, input model.NewPlaylist) (*model.Playlist, error)
	InputVideoToPlayList(ctx context.Context, input model.NewVideoToPlaylist) (*model.Playlist, error)
	UpdatePriorityWeight(ctx context.Context, playlistID string, userID string, videoID string, priorityWeight int) (*model.Playlist, error)
	UpdatePlayListDescription(ctx context.Context, playlistID string, userID string, description string) (*model.Playlist, error)
	UpdatePlayListViews(ctx context.Context, playlistID string, userID string) (*model.Playlist, error)
	UpdatePlayListHeader(ctx context.Context, playlistID string, userID string, header string) (*model.Playlist, error)
	UpdatePlaylistType(ctx context.Context, playlistID string, userID string, tipe bool) (*model.Playlist, error)
	DeleteVideo(ctx context.Context, playlistID string, userID string, videoID string) (bool, error)
	DeletePlaylist(ctx context.Context, playlistID string, userID string) (bool, error)
	CreateReplyReplies(ctx context.Context, input model.NewReplyReplies) (*model.ReplyReplies, error)
	UpdateReplyRepliesLikes(ctx context.Context, replyRepliesID string, like bool) (*model.ReplyReplies, error)
	UpdateReplyRepliesDislikes(ctx context.Context, replyRepliesID string, dislike bool) (*model.ReplyReplies, error)
	DeleteReplyReplies(ctx context.Context, replyRepliesID string) (*bool, error)
	CreateUser(ctx context.Context, input *model.NewUser) (*model.User, error)
	UpdatePremium(ctx context.Context, id string, premium bool) (*model.User, error)
	UpdatePremiumCountDay(ctx context.Context, id string, premiumDayCount int) (*model.User, error)
	UpdateLocation(ctx context.Context, id string, location string) (*model.User, error)
	UpdateSubscribers(ctx context.Context, id string, subscribe bool) (*model.User, error)
	UpdateRestrictionUser(ctx context.Context, id string, restriction bool) (*model.User, error)
	CreateUserSubscribe(ctx context.Context, input *model.NewUserSubscribe) (*model.UserSubscribe, error)
	UpdateUserSubscribe(ctx context.Context, userID string, channelID string) (*model.UserSubscribe, error)
	DeleteUserSubscribe(ctx context.Context, userID string, channelID string) (*bool, error)
	CreateVideo(ctx context.Context, input *model.NewVideo) (*model.Video, error)
	UpdateViews(ctx context.Context, videoID string) (*model.Video, error)
	UpdateLike(ctx context.Context, videoID string, likeVal bool) (*model.Video, error)
	UpdateDislike(ctx context.Context, videoID string, likeVal bool) (*model.Video, error)
	UpdateDescription(ctx context.Context, videoID string, descriptions *string) (*model.Video, error)
	UpdateRestriction(ctx context.Context, videoID string, restriction *bool) (*model.Video, error)
	UpdatePremiumVideo(ctx context.Context, videoID string, premium *bool) (*model.Video, error)
	UpdateVideoType(ctx context.Context, videoID string, typePub bool) (*model.Video, error)
	UpdateVideo(ctx context.Context, videoID string, desc string, title string, thumbnail string, privacy bool) (*model.Video, error)
	RemoveVideo(ctx context.Context, videoID string) (bool, error)
	CreateVideoLikeVali(ctx context.Context, input *model.NewVideoLikeVali) (*model.VideoLikeVali, error)
	UpdateVideoLikeVali(ctx context.Context, videoID string, userID string) (*model.VideoLikeVali, error)
	UpdateVideoDislikeVali(ctx context.Context, videoID string, userID string) (*model.VideoLikeVali, error)
	DeleteVideoLikeVali(ctx context.Context, videoID string) (*bool, error)
	CreateVideoReply(ctx context.Context, input model.NewVideoReply) (*model.VideoReply, error)
	UpdateReplyLikes(ctx context.Context, replyID string, like bool) (*model.VideoReply, error)
	UpdateReplyDislikes(ctx context.Context, replyID string, dislike bool) (*model.VideoReply, error)
	UpdateReplyDescription(ctx context.Context, replyID string, description string) (*model.VideoReply, error)
	DeleteReply(ctx context.Context, replyID string) (*bool, error)
	CreateNewVideoReplyLikeVali(ctx context.Context, input model.NewVideoReplyLikeVali) (*model.VideoReplyLikeVali, error)
	UpdateVideoReplyLikeVali(ctx context.Context, userID string, videoID string, replyID string) (*model.VideoReplyLikeVali, error)
	UpdateVideoReplyDislikeVali(ctx context.Context, userID string, videoID string, replyID *string) (*model.VideoReplyLikeVali, error)
	DeleteVideoReplyLikeVali(ctx context.Context, videoID string, replyID string) (*bool, error)
	CreateNewVideoReplyRepliesLikeVali(ctx context.Context, input *model.NewVideoReplyRepliesLikeVali) (*model.VideoReplyRepliesLikeVali, error)
	UpdateVideReplyRepliesLikeVali(ctx context.Context, videoReplyRepliesLikeValiID string, userID string, replyID string, videoID string, replyRepliesID string) (*model.VideoReplyRepliesLikeVali, error)
	UpdateVideoReplyRepliesDislikeVali(ctx context.Context, videoReplyRepliesLikeValiID string, userID string, replyID string, videoID string, replyRepliesID string) (*model.VideoReplyRepliesLikeVali, error)
	DeleteVideoReplyRepliesLikeVali(ctx context.Context, videoReplyRepliesLikeValiID string) (*bool, error)
	DeleteListVideoReplyReplyLikeVali(ctx context.Context, videoID string, replyID string) (*bool, error)
}
type QueryResolver interface {
	RetrievePlaylistSub(ctx context.Context, userID string, playlistID string) (*model.PlaylistSubscribe, error)
	RetrieveAllPlaylistSubs(ctx context.Context, userID string) ([]*model.PlaylistSubscribe, error)
	GetChannel(ctx context.Context, userID string) (*model.Channel, error)
	GetChannelID(ctx context.Context, channelID string) (*model.Channel, error)
	ChannelCommunities(ctx context.Context, channelID string) ([]*model.ChannelCommunity, error)
	ChannelCommunity(ctx context.Context, communityID string) (*model.ChannelCommunity, error)
	ChannelCommunityVali(ctx context.Context, communityValiID string, communityID string, userID string) (*model.ChannelCommunityVali, error)
	RetrieveLinks(ctx context.Context, userID string) ([]*model.ChannelLink, error)
	Playlists(ctx context.Context, userID string) ([]*model.Playlist, error)
	PlaylistsPublic(ctx context.Context, userID string) ([]*model.Playlist, error)
	PriorityNumber(ctx context.Context, playlistID string) (*model.Playlist, error)
	Playlist(ctx context.Context, playlistID string) (*model.Playlist, error)
	PlaylistListVideos(ctx context.Context, playlistID string) ([]*model.Playlist, error)
	PlaylistsRandom(ctx context.Context, userID string) ([]*model.Playlist, error)
	PlaylistsByKeyword(ctx context.Context, keyword string) ([]*model.Playlist, error)
	ReplyReply(ctx context.Context, replyRepliesID string) (*model.ReplyReplies, error)
	ListReplyReply(ctx context.Context, replyID string) ([]*model.ReplyReplies, error)
	Users(ctx context.Context, email string) (*model.User, error)
	UserByID(ctx context.Context, id string) (*model.User, error)
	ListUsers(ctx context.Context) ([]*model.User, error)
	GetUserByKeyword(ctx context.Context, keyword string) ([]*model.User, error)
	UserSubscribes(ctx context.Context, userID string) ([]*model.UserSubscribe, error)
	ChannelSubscribe(ctx context.Context, channelID string) (*model.UserSubscribe, error)
	GetChannelSubscribe(ctx context.Context, userID string) ([]*model.UserSubscribe, error)
	Videos(ctx context.Context, videoID string) (*model.Video, error)
	ListVideos(ctx context.Context) ([]*model.Video, error)
	VideoByLocation(ctx context.Context, location string, restriction bool, premium bool) ([]*model.Video, error)
	VideoByLocationSort(ctx context.Context, restriction bool, premium bool) ([]*model.Video, error)
	VideoByCategory(ctx context.Context, category string, restriction bool, premium bool) ([]*model.Video, error)
	VideoByUser(ctx context.Context, userID string, restriction bool, premium bool) ([]*model.Video, error)
	VideoTotalViews(ctx context.Context, userID string) (int, error)
	PremiumVideos(ctx context.Context) ([]*model.Video, error)
	GetLastVideos(ctx context.Context, userID string, premium bool, restriction bool) (*model.Video, error)
	GetFiveRandomVideos(ctx context.Context, userID string, restriction bool, premium bool) ([]*model.Video, error)
	GetVideoByKeyword(ctx context.Context, keyword string) ([]*model.Video, error)
	GetVideoByKeywordTopFive(ctx context.Context, keyword string) ([]*model.Video, error)
	RetrieveAllVideos(ctx context.Context, userID string) ([]*model.Video, error)
	VideoLikeVali(ctx context.Context, userID string, videoID string) (*model.VideoLikeVali, error)
	VideoReplies(ctx context.Context, videoID string) ([]*model.VideoReply, error)
	VideoReply(ctx context.Context, userID string, videoID string) (*model.VideoReply, error)
	VideoReplyLikeVali(ctx context.Context, userID string, videoID string, replyID string) (*model.VideoReplyLikeVali, error)
	VideoReplyRepliesLikeVali(ctx context.Context, videoReplyRepliesLikeValiID string) (*model.VideoReplyRepliesLikeVali, error)
}
type ReplyRepliesResolver interface {
	User(ctx context.Context, obj *model.ReplyReplies) (*model.User, error)
}
type VideoResolver interface {
	User(ctx context.Context, obj *model.Video) (*model.User, error)

	VideoReply(ctx context.Context, obj *model.Video) ([]*model.VideoReply, error)
}
type VideoReplyResolver interface {
	User(ctx context.Context, obj *model.VideoReply) (*model.User, error)

	ReplyReplies(ctx context.Context, obj *model.VideoReply) ([]*model.ReplyReplies, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Channel.channelBanner":
		if e.complexity.Channel.ChannelBanner == nil {
			break
		}

		return e.complexity.Channel.ChannelBanner(childComplexity), true

	case "Channel.channelDescription":
		if e.complexity.Channel.ChannelDescription == nil {
			break
		}

		return e.complexity.Channel.ChannelDescription(childComplexity), true

	case "Channel.channelID":
		if e.complexity.Channel.ChannelID == nil {
			break
		}

		return e.complexity.Channel.ChannelID(childComplexity), true

	case "Channel.channelImage":
		if e.complexity.Channel.ChannelImage == nil {
			break
		}

		return e.complexity.Channel.ChannelImage(childComplexity), true

	case "Channel.location":
		if e.complexity.Channel.Location == nil {
			break
		}

		return e.complexity.Channel.Location(childComplexity), true

	case "Channel.userID":
		if e.complexity.Channel.UserID == nil {
			break
		}

		return e.complexity.Channel.UserID(childComplexity), true

	case "Channel.videos":
		if e.complexity.Channel.Videos == nil {
			break
		}

		return e.complexity.Channel.Videos(childComplexity), true

	case "Channel.viewCount":
		if e.complexity.Channel.ViewCount == nil {
			break
		}

		return e.complexity.Channel.ViewCount(childComplexity), true

	case "ChannelCommunity.channelID":
		if e.complexity.ChannelCommunity.ChannelID == nil {
			break
		}

		return e.complexity.ChannelCommunity.ChannelID(childComplexity), true

	case "ChannelCommunity.comDescription":
		if e.complexity.ChannelCommunity.ComDescription == nil {
			break
		}

		return e.complexity.ChannelCommunity.ComDescription(childComplexity), true

	case "ChannelCommunity.communityID":
		if e.complexity.ChannelCommunity.CommunityID == nil {
			break
		}

		return e.complexity.ChannelCommunity.CommunityID(childComplexity), true

	case "ChannelCommunity.day":
		if e.complexity.ChannelCommunity.Day == nil {
			break
		}

		return e.complexity.ChannelCommunity.Day(childComplexity), true

	case "ChannelCommunity.dislike":
		if e.complexity.ChannelCommunity.Dislike == nil {
			break
		}

		return e.complexity.ChannelCommunity.Dislike(childComplexity), true

	case "ChannelCommunity.like":
		if e.complexity.ChannelCommunity.Like == nil {
			break
		}

		return e.complexity.ChannelCommunity.Like(childComplexity), true

	case "ChannelCommunity.month":
		if e.complexity.ChannelCommunity.Month == nil {
			break
		}

		return e.complexity.ChannelCommunity.Month(childComplexity), true

	case "ChannelCommunity.user":
		if e.complexity.ChannelCommunity.User == nil {
			break
		}

		return e.complexity.ChannelCommunity.User(childComplexity), true

	case "ChannelCommunity.year":
		if e.complexity.ChannelCommunity.Year == nil {
			break
		}

		return e.complexity.ChannelCommunity.Year(childComplexity), true

	case "ChannelCommunityVali.CommunityID":
		if e.complexity.ChannelCommunityVali.CommunityID == nil {
			break
		}

		return e.complexity.ChannelCommunityVali.CommunityID(childComplexity), true

	case "ChannelCommunityVali.CommunityValiID":
		if e.complexity.ChannelCommunityVali.CommunityValiID == nil {
			break
		}

		return e.complexity.ChannelCommunityVali.CommunityValiID(childComplexity), true

	case "ChannelCommunityVali.dislike":
		if e.complexity.ChannelCommunityVali.Dislike == nil {
			break
		}

		return e.complexity.ChannelCommunityVali.Dislike(childComplexity), true

	case "ChannelCommunityVali.like":
		if e.complexity.ChannelCommunityVali.Like == nil {
			break
		}

		return e.complexity.ChannelCommunityVali.Like(childComplexity), true

	case "ChannelCommunityVali.userID":
		if e.complexity.ChannelCommunityVali.UserID == nil {
			break
		}

		return e.complexity.ChannelCommunityVali.UserID(childComplexity), true

	case "Mutation.createChannel":
		if e.complexity.Mutation.CreateChannel == nil {
			break
		}

		args, err := ec.field_Mutation_createChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannel(childComplexity, args["input"].(*model.NewChannel)), true

	case "Mutation.createChannelCommunities":
		if e.complexity.Mutation.CreateChannelCommunities == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelCommunities(childComplexity, args["input"].(model.NewChannelCommunity)), true

	case "Mutation.createChannelCommunityVali":
		if e.complexity.Mutation.CreateChannelCommunityVali == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelCommunityVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelCommunityVali(childComplexity, args["input"].(*model.NewchannelCommunityVali)), true

	case "Mutation.createChannelLink":
		if e.complexity.Mutation.CreateChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelLink(childComplexity, args["input"].(model.NewChannelLink)), true

	case "Mutation.createNewVideoReplyLikeVali":
		if e.complexity.Mutation.CreateNewVideoReplyLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_createNewVideoReplyLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNewVideoReplyLikeVali(childComplexity, args["input"].(model.NewVideoReplyLikeVali)), true

	case "Mutation.createNewVideoReplyRepliesLikeVali":
		if e.complexity.Mutation.CreateNewVideoReplyRepliesLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_createNewVideoReplyRepliesLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNewVideoReplyRepliesLikeVali(childComplexity, args["input"].(*model.NewVideoReplyRepliesLikeVali)), true

	case "Mutation.createPlaylist":
		if e.complexity.Mutation.CreatePlaylist == nil {
			break
		}

		args, err := ec.field_Mutation_createPlaylist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlaylist(childComplexity, args["input"].(model.NewPlaylist)), true

	case "Mutation.createPlaylistSub":
		if e.complexity.Mutation.CreatePlaylistSub == nil {
			break
		}

		args, err := ec.field_Mutation_createPlaylistSub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlaylistSub(childComplexity, args["input"].(model.NewPlaylistSubscribe)), true

	case "Mutation.createReplyReplies":
		if e.complexity.Mutation.CreateReplyReplies == nil {
			break
		}

		args, err := ec.field_Mutation_createReplyReplies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReplyReplies(childComplexity, args["input"].(model.NewReplyReplies)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(*model.NewUser)), true

	case "Mutation.createUserSubscribe":
		if e.complexity.Mutation.CreateUserSubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_createUserSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserSubscribe(childComplexity, args["input"].(*model.NewUserSubscribe)), true

	case "Mutation.createVideo":
		if e.complexity.Mutation.CreateVideo == nil {
			break
		}

		args, err := ec.field_Mutation_createVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVideo(childComplexity, args["input"].(*model.NewVideo)), true

	case "Mutation.createVideoLikeVali":
		if e.complexity.Mutation.CreateVideoLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_createVideoLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVideoLikeVali(childComplexity, args["input"].(*model.NewVideoLikeVali)), true

	case "Mutation.createVideoReply":
		if e.complexity.Mutation.CreateVideoReply == nil {
			break
		}

		args, err := ec.field_Mutation_createVideoReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVideoReply(childComplexity, args["input"].(model.NewVideoReply)), true

	case "Mutation.deleteAllChannelLink":
		if e.complexity.Mutation.DeleteAllChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAllChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAllChannelLink(childComplexity, args["userID"].(string)), true

	case "Mutation.deleteAllPlaylistSubs":
		if e.complexity.Mutation.DeleteAllPlaylistSubs == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAllPlaylistSubs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAllPlaylistSubs(childComplexity, args["playlistID"].(string)), true

	case "Mutation.deleteChannel":
		if e.complexity.Mutation.DeleteChannel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannel(childComplexity, args["channelID"].(string)), true

	case "Mutation.deleteChannelCommunities":
		if e.complexity.Mutation.DeleteChannelCommunities == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelCommunities(childComplexity, args["communityID"].(string)), true

	case "Mutation.deleteChannelCommunityVali":
		if e.complexity.Mutation.DeleteChannelCommunityVali == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelCommunityVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelCommunityVali(childComplexity, args["communityID"].(string)), true

	case "Mutation.deleteChannelLink":
		if e.complexity.Mutation.DeleteChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelLink(childComplexity, args["channelLinkID"].(string), args["userID"].(string)), true

	case "Mutation.deleteListVideoReplyReplyLikeVali":
		if e.complexity.Mutation.DeleteListVideoReplyReplyLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_deleteListVideoReplyReplyLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteListVideoReplyReplyLikeVali(childComplexity, args["videoID"].(string), args["replyID"].(string)), true

	case "Mutation.deletePlaylist":
		if e.complexity.Mutation.DeletePlaylist == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlaylist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlaylist(childComplexity, args["playlistID"].(string), args["userID"].(string)), true

	case "Mutation.deletePlaylistSub":
		if e.complexity.Mutation.DeletePlaylistSub == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlaylistSub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlaylistSub(childComplexity, args["userID"].(string), args["playlistID"].(string)), true

	case "Mutation.deleteReply":
		if e.complexity.Mutation.DeleteReply == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReply(childComplexity, args["replyID"].(string)), true

	case "Mutation.deleteReplyReplies":
		if e.complexity.Mutation.DeleteReplyReplies == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReplyReplies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReplyReplies(childComplexity, args["replyRepliesID"].(string)), true

	case "Mutation.deleteUserSubscribe":
		if e.complexity.Mutation.DeleteUserSubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserSubscribe(childComplexity, args["userID"].(string), args["channelID"].(string)), true

	case "Mutation.deleteVideo":
		if e.complexity.Mutation.DeleteVideo == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideo(childComplexity, args["playlistID"].(string), args["userID"].(string), args["videoID"].(string)), true

	case "Mutation.deleteVideoLikeVali":
		if e.complexity.Mutation.DeleteVideoLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVideoLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideoLikeVali(childComplexity, args["videoID"].(string)), true

	case "Mutation.deleteVideoReplyLikeVali":
		if e.complexity.Mutation.DeleteVideoReplyLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVideoReplyLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideoReplyLikeVali(childComplexity, args["videoID"].(string), args["replyID"].(string)), true

	case "Mutation.deleteVideoReplyRepliesLikeVali":
		if e.complexity.Mutation.DeleteVideoReplyRepliesLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVideoReplyRepliesLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideoReplyRepliesLikeVali(childComplexity, args["videoReplyRepliesLikeValiID"].(string)), true

	case "Mutation.inputVideoToPlayList":
		if e.complexity.Mutation.InputVideoToPlayList == nil {
			break
		}

		args, err := ec.field_Mutation_inputVideoToPlayList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InputVideoToPlayList(childComplexity, args["input"].(model.NewVideoToPlaylist)), true

	case "Mutation.removeVideo":
		if e.complexity.Mutation.RemoveVideo == nil {
			break
		}

		args, err := ec.field_Mutation_removeVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveVideo(childComplexity, args["VideoID"].(string)), true

	case "Mutation.updateChannelBanner":
		if e.complexity.Mutation.UpdateChannelBanner == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelBanner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelBanner(childComplexity, args["channelID"].(string), args["channelBanner"].(string)), true

	case "Mutation.updateChannelCommunitiesDislike":
		if e.complexity.Mutation.UpdateChannelCommunitiesDislike == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelCommunitiesDislike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelCommunitiesDislike(childComplexity, args["communityID"].(string), args["dislike"].(bool)), true

	case "Mutation.updateChannelCommunitiesLike":
		if e.complexity.Mutation.UpdateChannelCommunitiesLike == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelCommunitiesLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelCommunitiesLike(childComplexity, args["communityID"].(string), args["like"].(bool)), true

	case "Mutation.updateChannelCommunityValiDislike":
		if e.complexity.Mutation.UpdateChannelCommunityValiDislike == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelCommunityValiDislike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelCommunityValiDislike(childComplexity, args["communityValiID"].(string)), true

	case "Mutation.updateChannelCommunityValiLike":
		if e.complexity.Mutation.UpdateChannelCommunityValiLike == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelCommunityValiLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelCommunityValiLike(childComplexity, args["communityValiID"].(string)), true

	case "Mutation.updateChannelDescription":
		if e.complexity.Mutation.UpdateChannelDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelDescription(childComplexity, args["channelID"].(string), args["description"].(string)), true

	case "Mutation.updateChannelImage":
		if e.complexity.Mutation.UpdateChannelImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelImage(childComplexity, args["channelID"].(string), args["channelImage"].(string)), true

	case "Mutation.updateChannelLink":
		if e.complexity.Mutation.UpdateChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelLink(childComplexity, args["channelLinkID"].(string), args["userID"].(string), args["link"].(string)), true

	case "Mutation.updateChannelLocation":
		if e.complexity.Mutation.UpdateChannelLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelLocation(childComplexity, args["channelID"].(string), args["location"].(string)), true

	case "Mutation.updateChannelView":
		if e.complexity.Mutation.UpdateChannelView == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelView_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelView(childComplexity, args["channelID"].(string), args["viewCount"].(int)), true

	case "Mutation.updateDescription":
		if e.complexity.Mutation.UpdateDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updateDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDescription(childComplexity, args["VideoID"].(string), args["descriptions"].(*string)), true

	case "Mutation.updateDislike":
		if e.complexity.Mutation.UpdateDislike == nil {
			break
		}

		args, err := ec.field_Mutation_updateDislike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDislike(childComplexity, args["VideoID"].(string), args["likeVal"].(bool)), true

	case "Mutation.updateLike":
		if e.complexity.Mutation.UpdateLike == nil {
			break
		}

		args, err := ec.field_Mutation_updateLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLike(childComplexity, args["VideoID"].(string), args["likeVal"].(bool)), true

	case "Mutation.updateLocation":
		if e.complexity.Mutation.UpdateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocation(childComplexity, args["id"].(string), args["location"].(string)), true

	case "Mutation.updatePlayListDescription":
		if e.complexity.Mutation.UpdatePlayListDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlayListDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlayListDescription(childComplexity, args["playlistID"].(string), args["userID"].(string), args["description"].(string)), true

	case "Mutation.updatePlayListHeader":
		if e.complexity.Mutation.UpdatePlayListHeader == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlayListHeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlayListHeader(childComplexity, args["playlistID"].(string), args["userID"].(string), args["header"].(string)), true

	case "Mutation.updatePlayListViews":
		if e.complexity.Mutation.UpdatePlayListViews == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlayListViews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlayListViews(childComplexity, args["playlistID"].(string), args["userID"].(string)), true

	case "Mutation.updatePlaylistSub":
		if e.complexity.Mutation.UpdatePlaylistSub == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlaylistSub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlaylistSub(childComplexity, args["userID"].(string), args["playlistID"].(string)), true

	case "Mutation.updatePlaylistType":
		if e.complexity.Mutation.UpdatePlaylistType == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlaylistType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlaylistType(childComplexity, args["playlistID"].(string), args["userID"].(string), args["tipe"].(bool)), true

	case "Mutation.updatePremium":
		if e.complexity.Mutation.UpdatePremium == nil {
			break
		}

		args, err := ec.field_Mutation_updatePremium_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePremium(childComplexity, args["id"].(string), args["premium"].(bool)), true

	case "Mutation.updatePremiumCountDay":
		if e.complexity.Mutation.UpdatePremiumCountDay == nil {
			break
		}

		args, err := ec.field_Mutation_updatePremiumCountDay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePremiumCountDay(childComplexity, args["id"].(string), args["premiumDayCount"].(int)), true

	case "Mutation.updatePremiumVideo":
		if e.complexity.Mutation.UpdatePremiumVideo == nil {
			break
		}

		args, err := ec.field_Mutation_updatePremiumVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePremiumVideo(childComplexity, args["VideoID"].(string), args["premium"].(*bool)), true

	case "Mutation.updatePriorityWeight":
		if e.complexity.Mutation.UpdatePriorityWeight == nil {
			break
		}

		args, err := ec.field_Mutation_updatePriorityWeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePriorityWeight(childComplexity, args["playlistID"].(string), args["userID"].(string), args["videoID"].(string), args["priorityWeight"].(int)), true

	case "Mutation.updateReplyDescription":
		if e.complexity.Mutation.UpdateReplyDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyDescription(childComplexity, args["replyID"].(string), args["description"].(string)), true

	case "Mutation.updateReplyDislikes":
		if e.complexity.Mutation.UpdateReplyDislikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyDislikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyDislikes(childComplexity, args["replyID"].(string), args["dislike"].(bool)), true

	case "Mutation.updateReplyLikes":
		if e.complexity.Mutation.UpdateReplyLikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyLikes(childComplexity, args["replyID"].(string), args["like"].(bool)), true

	case "Mutation.updateReplyRepliesDislikes":
		if e.complexity.Mutation.UpdateReplyRepliesDislikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyRepliesDislikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyRepliesDislikes(childComplexity, args["replyRepliesID"].(string), args["dislike"].(bool)), true

	case "Mutation.updateReplyRepliesLikes":
		if e.complexity.Mutation.UpdateReplyRepliesLikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyRepliesLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyRepliesLikes(childComplexity, args["replyRepliesID"].(string), args["like"].(bool)), true

	case "Mutation.updateRestriction":
		if e.complexity.Mutation.UpdateRestriction == nil {
			break
		}

		args, err := ec.field_Mutation_updateRestriction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRestriction(childComplexity, args["VideoID"].(string), args["restriction"].(*bool)), true

	case "Mutation.updateRestrictionUser":
		if e.complexity.Mutation.UpdateRestrictionUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateRestrictionUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRestrictionUser(childComplexity, args["id"].(string), args["restriction"].(bool)), true

	case "Mutation.updateSubscribers":
		if e.complexity.Mutation.UpdateSubscribers == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubscribers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubscribers(childComplexity, args["id"].(string), args["subscribe"].(bool)), true

	case "Mutation.updateUserSubscribe":
		if e.complexity.Mutation.UpdateUserSubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserSubscribe(childComplexity, args["userID"].(string), args["channelID"].(string)), true

	case "Mutation.updateVideReplyRepliesLikeVali":
		if e.complexity.Mutation.UpdateVideReplyRepliesLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideReplyRepliesLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideReplyRepliesLikeVali(childComplexity, args["videoReplyRepliesLikeValiID"].(string), args["userID"].(string), args["replyID"].(string), args["videoID"].(string), args["replyRepliesID"].(string)), true

	case "Mutation.updateVideo":
		if e.complexity.Mutation.UpdateVideo == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideo(childComplexity, args["VideoID"].(string), args["desc"].(string), args["title"].(string), args["thumbnail"].(string), args["privacy"].(bool)), true

	case "Mutation.updateVideoDislikeVali":
		if e.complexity.Mutation.UpdateVideoDislikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoDislikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoDislikeVali(childComplexity, args["videoID"].(string), args["userID"].(string)), true

	case "Mutation.updateVideoLikeVali":
		if e.complexity.Mutation.UpdateVideoLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoLikeVali(childComplexity, args["videoID"].(string), args["userID"].(string)), true

	case "Mutation.updateVideoReplyDislikeVali":
		if e.complexity.Mutation.UpdateVideoReplyDislikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoReplyDislikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoReplyDislikeVali(childComplexity, args["userID"].(string), args["videoID"].(string), args["replyID"].(*string)), true

	case "Mutation.updateVideoReplyLikeVali":
		if e.complexity.Mutation.UpdateVideoReplyLikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoReplyLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoReplyLikeVali(childComplexity, args["userID"].(string), args["videoID"].(string), args["replyID"].(string)), true

	case "Mutation.updateVideoReplyRepliesDislikeVali":
		if e.complexity.Mutation.UpdateVideoReplyRepliesDislikeVali == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoReplyRepliesDislikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoReplyRepliesDislikeVali(childComplexity, args["videoReplyRepliesLikeValiID"].(string), args["userID"].(string), args["replyID"].(string), args["videoID"].(string), args["replyRepliesID"].(string)), true

	case "Mutation.updateVideoType":
		if e.complexity.Mutation.UpdateVideoType == nil {
			break
		}

		args, err := ec.field_Mutation_updateVideoType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoType(childComplexity, args["VideoID"].(string), args["typePub"].(bool)), true

	case "Mutation.updateViews":
		if e.complexity.Mutation.UpdateViews == nil {
			break
		}

		args, err := ec.field_Mutation_updateViews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateViews(childComplexity, args["VideoID"].(string)), true

	case "Playlist.dateAddToPlaylist":
		if e.complexity.Playlist.DateAddToPlaylist == nil {
			break
		}

		return e.complexity.Playlist.DateAddToPlaylist(childComplexity), true

	case "Playlist.datePublish":
		if e.complexity.Playlist.DatePublish == nil {
			break
		}

		return e.complexity.Playlist.DatePublish(childComplexity), true

	case "Playlist.description":
		if e.complexity.Playlist.Description == nil {
			break
		}

		return e.complexity.Playlist.Description(childComplexity), true

	case "Playlist.playlistHeader":
		if e.complexity.Playlist.PlaylistHeader == nil {
			break
		}

		return e.complexity.Playlist.PlaylistHeader(childComplexity), true

	case "Playlist.playlistID":
		if e.complexity.Playlist.PlaylistID == nil {
			break
		}

		return e.complexity.Playlist.PlaylistID(childComplexity), true

	case "Playlist.playlistType":
		if e.complexity.Playlist.PlaylistType == nil {
			break
		}

		return e.complexity.Playlist.PlaylistType(childComplexity), true

	case "Playlist.priorityWeight":
		if e.complexity.Playlist.PriorityWeight == nil {
			break
		}

		return e.complexity.Playlist.PriorityWeight(childComplexity), true

	case "Playlist.totalVideo":
		if e.complexity.Playlist.TotalVideo == nil {
			break
		}

		return e.complexity.Playlist.TotalVideo(childComplexity), true

	case "Playlist.userID":
		if e.complexity.Playlist.UserID == nil {
			break
		}

		return e.complexity.Playlist.UserID(childComplexity), true

	case "Playlist.videoID":
		if e.complexity.Playlist.VideoID == nil {
			break
		}

		return e.complexity.Playlist.VideoID(childComplexity), true

	case "Playlist.views":
		if e.complexity.Playlist.Views == nil {
			break
		}

		return e.complexity.Playlist.Views(childComplexity), true

	case "Query.channelCommunities":
		if e.complexity.Query.ChannelCommunities == nil {
			break
		}

		args, err := ec.field_Query_channelCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelCommunities(childComplexity, args["channelID"].(string)), true

	case "Query.channelCommunity":
		if e.complexity.Query.ChannelCommunity == nil {
			break
		}

		args, err := ec.field_Query_channelCommunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelCommunity(childComplexity, args["communityID"].(string)), true

	case "Query.channelCommunityVali":
		if e.complexity.Query.ChannelCommunityVali == nil {
			break
		}

		args, err := ec.field_Query_channelCommunityVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelCommunityVali(childComplexity, args["communityValiID"].(string), args["communityID"].(string), args["userID"].(string)), true

	case "Query.channelSubscribe":
		if e.complexity.Query.ChannelSubscribe == nil {
			break
		}

		args, err := ec.field_Query_channelSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelSubscribe(childComplexity, args["channelID"].(string)), true

	case "Query.getChannel":
		if e.complexity.Query.GetChannel == nil {
			break
		}

		args, err := ec.field_Query_getChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChannel(childComplexity, args["userID"].(string)), true

	case "Query.getChannelId":
		if e.complexity.Query.GetChannelID == nil {
			break
		}

		args, err := ec.field_Query_getChannelId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChannelID(childComplexity, args["channelID"].(string)), true

	case "Query.getChannelSubscribe":
		if e.complexity.Query.GetChannelSubscribe == nil {
			break
		}

		args, err := ec.field_Query_getChannelSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChannelSubscribe(childComplexity, args["userID"].(string)), true

	case "Query.getFiveRandomVideos":
		if e.complexity.Query.GetFiveRandomVideos == nil {
			break
		}

		args, err := ec.field_Query_getFiveRandomVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFiveRandomVideos(childComplexity, args["userID"].(string), args["restriction"].(bool), args["premium"].(bool)), true

	case "Query.getLastVideos":
		if e.complexity.Query.GetLastVideos == nil {
			break
		}

		args, err := ec.field_Query_getLastVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLastVideos(childComplexity, args["userID"].(string), args["premium"].(bool), args["restriction"].(bool)), true

	case "Query.getUserByKeyword":
		if e.complexity.Query.GetUserByKeyword == nil {
			break
		}

		args, err := ec.field_Query_getUserByKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserByKeyword(childComplexity, args["keyword"].(string)), true

	case "Query.getVideoByKeyword":
		if e.complexity.Query.GetVideoByKeyword == nil {
			break
		}

		args, err := ec.field_Query_getVideoByKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVideoByKeyword(childComplexity, args["keyword"].(string)), true

	case "Query.getVideoByKeywordTopFive":
		if e.complexity.Query.GetVideoByKeywordTopFive == nil {
			break
		}

		args, err := ec.field_Query_getVideoByKeywordTopFive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVideoByKeywordTopFive(childComplexity, args["keyword"].(string)), true

	case "Query.listReplyReply":
		if e.complexity.Query.ListReplyReply == nil {
			break
		}

		args, err := ec.field_Query_listReplyReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListReplyReply(childComplexity, args["replyID"].(string)), true

	case "Query.listUsers":
		if e.complexity.Query.ListUsers == nil {
			break
		}

		return e.complexity.Query.ListUsers(childComplexity), true

	case "Query.listVideos":
		if e.complexity.Query.ListVideos == nil {
			break
		}

		return e.complexity.Query.ListVideos(childComplexity), true

	case "Query.playlist":
		if e.complexity.Query.Playlist == nil {
			break
		}

		args, err := ec.field_Query_playlist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Playlist(childComplexity, args["playlistID"].(string)), true

	case "Query.playlistListVideos":
		if e.complexity.Query.PlaylistListVideos == nil {
			break
		}

		args, err := ec.field_Query_playlistListVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlaylistListVideos(childComplexity, args["playlistID"].(string)), true

	case "Query.playlists":
		if e.complexity.Query.Playlists == nil {
			break
		}

		args, err := ec.field_Query_playlists_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Playlists(childComplexity, args["userID"].(string)), true

	case "Query.playlistsByKeyword":
		if e.complexity.Query.PlaylistsByKeyword == nil {
			break
		}

		args, err := ec.field_Query_playlistsByKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlaylistsByKeyword(childComplexity, args["keyword"].(string)), true

	case "Query.playlistsPublic":
		if e.complexity.Query.PlaylistsPublic == nil {
			break
		}

		args, err := ec.field_Query_playlistsPublic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlaylistsPublic(childComplexity, args["userID"].(string)), true

	case "Query.playlistsRandom":
		if e.complexity.Query.PlaylistsRandom == nil {
			break
		}

		args, err := ec.field_Query_playlistsRandom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlaylistsRandom(childComplexity, args["userID"].(string)), true

	case "Query.premiumVideos":
		if e.complexity.Query.PremiumVideos == nil {
			break
		}

		return e.complexity.Query.PremiumVideos(childComplexity), true

	case "Query.priorityNumber":
		if e.complexity.Query.PriorityNumber == nil {
			break
		}

		args, err := ec.field_Query_priorityNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PriorityNumber(childComplexity, args["playlistID"].(string)), true

	case "Query.replyReply":
		if e.complexity.Query.ReplyReply == nil {
			break
		}

		args, err := ec.field_Query_replyReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReplyReply(childComplexity, args["replyRepliesID"].(string)), true

	case "Query.retrieveAllPlaylistSubs":
		if e.complexity.Query.RetrieveAllPlaylistSubs == nil {
			break
		}

		args, err := ec.field_Query_retrieveAllPlaylistSubs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveAllPlaylistSubs(childComplexity, args["userID"].(string)), true

	case "Query.retrieveAllVideos":
		if e.complexity.Query.RetrieveAllVideos == nil {
			break
		}

		args, err := ec.field_Query_retrieveAllVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveAllVideos(childComplexity, args["userID"].(string)), true

	case "Query.retrieveLinks":
		if e.complexity.Query.RetrieveLinks == nil {
			break
		}

		args, err := ec.field_Query_retrieveLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveLinks(childComplexity, args["userID"].(string)), true

	case "Query.retrievePlaylistSub":
		if e.complexity.Query.RetrievePlaylistSub == nil {
			break
		}

		args, err := ec.field_Query_retrievePlaylistSub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePlaylistSub(childComplexity, args["userID"].(string), args["playlistID"].(string)), true

	case "Query.userById":
		if e.complexity.Query.UserByID == nil {
			break
		}

		args, err := ec.field_Query_userById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserByID(childComplexity, args["id"].(string)), true

	case "Query.userSubscribes":
		if e.complexity.Query.UserSubscribes == nil {
			break
		}

		args, err := ec.field_Query_userSubscribes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSubscribes(childComplexity, args["userID"].(string)), true

	case "Query.Users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_Users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["email"].(string)), true

	case "Query.videoByCategory":
		if e.complexity.Query.VideoByCategory == nil {
			break
		}

		args, err := ec.field_Query_videoByCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoByCategory(childComplexity, args["category"].(string), args["restriction"].(bool), args["premium"].(bool)), true

	case "Query.videoByLocation":
		if e.complexity.Query.VideoByLocation == nil {
			break
		}

		args, err := ec.field_Query_videoByLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoByLocation(childComplexity, args["location"].(string), args["restriction"].(bool), args["premium"].(bool)), true

	case "Query.videoByLocationSort":
		if e.complexity.Query.VideoByLocationSort == nil {
			break
		}

		args, err := ec.field_Query_videoByLocationSort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoByLocationSort(childComplexity, args["restriction"].(bool), args["premium"].(bool)), true

	case "Query.videoByUser":
		if e.complexity.Query.VideoByUser == nil {
			break
		}

		args, err := ec.field_Query_videoByUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoByUser(childComplexity, args["userID"].(string), args["restriction"].(bool), args["premium"].(bool)), true

	case "Query.videoLikeVali":
		if e.complexity.Query.VideoLikeVali == nil {
			break
		}

		args, err := ec.field_Query_videoLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoLikeVali(childComplexity, args["userID"].(string), args["videoID"].(string)), true

	case "Query.videoReplies":
		if e.complexity.Query.VideoReplies == nil {
			break
		}

		args, err := ec.field_Query_videoReplies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoReplies(childComplexity, args["videoID"].(string)), true

	case "Query.videoReply":
		if e.complexity.Query.VideoReply == nil {
			break
		}

		args, err := ec.field_Query_videoReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoReply(childComplexity, args["userID"].(string), args["videoID"].(string)), true

	case "Query.videoReplyLikeVali":
		if e.complexity.Query.VideoReplyLikeVali == nil {
			break
		}

		args, err := ec.field_Query_videoReplyLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoReplyLikeVali(childComplexity, args["userID"].(string), args["videoID"].(string), args["replyID"].(string)), true

	case "Query.videoReplyRepliesLikeVali":
		if e.complexity.Query.VideoReplyRepliesLikeVali == nil {
			break
		}

		args, err := ec.field_Query_videoReplyRepliesLikeVali_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoReplyRepliesLikeVali(childComplexity, args["videoReplyRepliesLikeValiID"].(string)), true

	case "Query.videoTotalViews":
		if e.complexity.Query.VideoTotalViews == nil {
			break
		}

		args, err := ec.field_Query_videoTotalViews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoTotalViews(childComplexity, args["userID"].(string)), true

	case "Query.Videos":
		if e.complexity.Query.Videos == nil {
			break
		}

		args, err := ec.field_Query_Videos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Videos(childComplexity, args["videoID"].(string)), true

	case "ReplyReplies.day":
		if e.complexity.ReplyReplies.Day == nil {
			break
		}

		return e.complexity.ReplyReplies.Day(childComplexity), true

	case "ReplyReplies.description":
		if e.complexity.ReplyReplies.Description == nil {
			break
		}

		return e.complexity.ReplyReplies.Description(childComplexity), true

	case "ReplyReplies.dislike":
		if e.complexity.ReplyReplies.Dislike == nil {
			break
		}

		return e.complexity.ReplyReplies.Dislike(childComplexity), true

	case "ReplyReplies.like":
		if e.complexity.ReplyReplies.Like == nil {
			break
		}

		return e.complexity.ReplyReplies.Like(childComplexity), true

	case "ReplyReplies.month":
		if e.complexity.ReplyReplies.Month == nil {
			break
		}

		return e.complexity.ReplyReplies.Month(childComplexity), true

	case "ReplyReplies.replyID":
		if e.complexity.ReplyReplies.ReplyID == nil {
			break
		}

		return e.complexity.ReplyReplies.ReplyID(childComplexity), true

	case "ReplyReplies.replyRepliesID":
		if e.complexity.ReplyReplies.ReplyRepliesID == nil {
			break
		}

		return e.complexity.ReplyReplies.ReplyRepliesID(childComplexity), true

	case "ReplyReplies.user":
		if e.complexity.ReplyReplies.User == nil {
			break
		}

		return e.complexity.ReplyReplies.User(childComplexity), true

	case "ReplyReplies.year":
		if e.complexity.ReplyReplies.Year == nil {
			break
		}

		return e.complexity.ReplyReplies.Year(childComplexity), true

	case "User.date":
		if e.complexity.User.Date == nil {
			break
		}

		return e.complexity.User.Date(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.location":
		if e.complexity.User.Location == nil {
			break
		}

		return e.complexity.User.Location(childComplexity), true

	case "User.premium":
		if e.complexity.User.Premium == nil {
			break
		}

		return e.complexity.User.Premium(childComplexity), true

	case "User.premiumDayCount":
		if e.complexity.User.PremiumDayCount == nil {
			break
		}

		return e.complexity.User.PremiumDayCount(childComplexity), true

	case "User.restriction":
		if e.complexity.User.Restriction == nil {
			break
		}

		return e.complexity.User.Restriction(childComplexity), true

	case "User.subscribers":
		if e.complexity.User.Subscribers == nil {
			break
		}

		return e.complexity.User.Subscribers(childComplexity), true

	case "User.thumbnail":
		if e.complexity.User.Thumbnail == nil {
			break
		}

		return e.complexity.User.Thumbnail(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "Video.category":
		if e.complexity.Video.Category == nil {
			break
		}

		return e.complexity.Video.Category(childComplexity), true

	case "Video.day":
		if e.complexity.Video.Day == nil {
			break
		}

		return e.complexity.Video.Day(childComplexity), true

	case "Video.descriptions":
		if e.complexity.Video.Descriptions == nil {
			break
		}

		return e.complexity.Video.Descriptions(childComplexity), true

	case "Video.dislike":
		if e.complexity.Video.Dislike == nil {
			break
		}

		return e.complexity.Video.Dislike(childComplexity), true

	case "Video.like":
		if e.complexity.Video.Like == nil {
			break
		}

		return e.complexity.Video.Like(childComplexity), true

	case "Video.location":
		if e.complexity.Video.Location == nil {
			break
		}

		return e.complexity.Video.Location(childComplexity), true

	case "Video.month":
		if e.complexity.Video.Month == nil {
			break
		}

		return e.complexity.Video.Month(childComplexity), true

	case "Video.premium":
		if e.complexity.Video.Premium == nil {
			break
		}

		return e.complexity.Video.Premium(childComplexity), true

	case "Video.restriction":
		if e.complexity.Video.Restriction == nil {
			break
		}

		return e.complexity.Video.Restriction(childComplexity), true

	case "Video.sourceLink":
		if e.complexity.Video.SourceLink == nil {
			break
		}

		return e.complexity.Video.SourceLink(childComplexity), true

	case "Video.thumbnail":
		if e.complexity.Video.Thumbnail == nil {
			break
		}

		return e.complexity.Video.Thumbnail(childComplexity), true

	case "Video.title":
		if e.complexity.Video.Title == nil {
			break
		}

		return e.complexity.Video.Title(childComplexity), true

	case "Video.typePub":
		if e.complexity.Video.TypePub == nil {
			break
		}

		return e.complexity.Video.TypePub(childComplexity), true

	case "Video.user":
		if e.complexity.Video.User == nil {
			break
		}

		return e.complexity.Video.User(childComplexity), true

	case "Video.videoID":
		if e.complexity.Video.VideoID == nil {
			break
		}

		return e.complexity.Video.VideoID(childComplexity), true

	case "Video.videoLength":
		if e.complexity.Video.VideoLength == nil {
			break
		}

		return e.complexity.Video.VideoLength(childComplexity), true

	case "Video.videoReply":
		if e.complexity.Video.VideoReply == nil {
			break
		}

		return e.complexity.Video.VideoReply(childComplexity), true

	case "Video.views":
		if e.complexity.Video.Views == nil {
			break
		}

		return e.complexity.Video.Views(childComplexity), true

	case "Video.year":
		if e.complexity.Video.Year == nil {
			break
		}

		return e.complexity.Video.Year(childComplexity), true

	case "VideoLikeVali.dislike":
		if e.complexity.VideoLikeVali.Dislike == nil {
			break
		}

		return e.complexity.VideoLikeVali.Dislike(childComplexity), true

	case "VideoLikeVali.like":
		if e.complexity.VideoLikeVali.Like == nil {
			break
		}

		return e.complexity.VideoLikeVali.Like(childComplexity), true

	case "VideoLikeVali.userID":
		if e.complexity.VideoLikeVali.UserID == nil {
			break
		}

		return e.complexity.VideoLikeVali.UserID(childComplexity), true

	case "VideoLikeVali.videoID":
		if e.complexity.VideoLikeVali.VideoID == nil {
			break
		}

		return e.complexity.VideoLikeVali.VideoID(childComplexity), true

	case "VideoReply.day":
		if e.complexity.VideoReply.Day == nil {
			break
		}

		return e.complexity.VideoReply.Day(childComplexity), true

	case "VideoReply.description":
		if e.complexity.VideoReply.Description == nil {
			break
		}

		return e.complexity.VideoReply.Description(childComplexity), true

	case "VideoReply.dislikes":
		if e.complexity.VideoReply.Dislikes == nil {
			break
		}

		return e.complexity.VideoReply.Dislikes(childComplexity), true

	case "VideoReply.likes":
		if e.complexity.VideoReply.Likes == nil {
			break
		}

		return e.complexity.VideoReply.Likes(childComplexity), true

	case "VideoReply.month":
		if e.complexity.VideoReply.Month == nil {
			break
		}

		return e.complexity.VideoReply.Month(childComplexity), true

	case "VideoReply.replyID":
		if e.complexity.VideoReply.ReplyID == nil {
			break
		}

		return e.complexity.VideoReply.ReplyID(childComplexity), true

	case "VideoReply.replyReplies":
		if e.complexity.VideoReply.ReplyReplies == nil {
			break
		}

		return e.complexity.VideoReply.ReplyReplies(childComplexity), true

	case "VideoReply.user":
		if e.complexity.VideoReply.User == nil {
			break
		}

		return e.complexity.VideoReply.User(childComplexity), true

	case "VideoReply.videoID":
		if e.complexity.VideoReply.VideoID == nil {
			break
		}

		return e.complexity.VideoReply.VideoID(childComplexity), true

	case "VideoReply.year":
		if e.complexity.VideoReply.Year == nil {
			break
		}

		return e.complexity.VideoReply.Year(childComplexity), true

	case "VideoReplyLikeVali.dislike":
		if e.complexity.VideoReplyLikeVali.Dislike == nil {
			break
		}

		return e.complexity.VideoReplyLikeVali.Dislike(childComplexity), true

	case "VideoReplyLikeVali.like":
		if e.complexity.VideoReplyLikeVali.Like == nil {
			break
		}

		return e.complexity.VideoReplyLikeVali.Like(childComplexity), true

	case "VideoReplyLikeVali.replyID":
		if e.complexity.VideoReplyLikeVali.ReplyID == nil {
			break
		}

		return e.complexity.VideoReplyLikeVali.ReplyID(childComplexity), true

	case "VideoReplyLikeVali.userID":
		if e.complexity.VideoReplyLikeVali.UserID == nil {
			break
		}

		return e.complexity.VideoReplyLikeVali.UserID(childComplexity), true

	case "VideoReplyLikeVali.videoID":
		if e.complexity.VideoReplyLikeVali.VideoID == nil {
			break
		}

		return e.complexity.VideoReplyLikeVali.VideoID(childComplexity), true

	case "VideoReplyRepliesLikeVali.dislike":
		if e.complexity.VideoReplyRepliesLikeVali.Dislike == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.Dislike(childComplexity), true

	case "VideoReplyRepliesLikeVali.like":
		if e.complexity.VideoReplyRepliesLikeVali.Like == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.Like(childComplexity), true

	case "VideoReplyRepliesLikeVali.replyID":
		if e.complexity.VideoReplyRepliesLikeVali.ReplyID == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.ReplyID(childComplexity), true

	case "VideoReplyRepliesLikeVali.replyRepliesID":
		if e.complexity.VideoReplyRepliesLikeVali.ReplyRepliesID == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.ReplyRepliesID(childComplexity), true

	case "VideoReplyRepliesLikeVali.userID":
		if e.complexity.VideoReplyRepliesLikeVali.UserID == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.UserID(childComplexity), true

	case "VideoReplyRepliesLikeVali.videoID":
		if e.complexity.VideoReplyRepliesLikeVali.VideoID == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.VideoID(childComplexity), true

	case "VideoReplyRepliesLikeVali.videoReplyRepliesLikeValiID":
		if e.complexity.VideoReplyRepliesLikeVali.VideoReplyRepliesLikeValiID == nil {
			break
		}

		return e.complexity.VideoReplyRepliesLikeVali.VideoReplyRepliesLikeValiID(childComplexity), true

	case "channelLink.channelLinkID":
		if e.complexity.ChannelLink.ChannelLinkID == nil {
			break
		}

		return e.complexity.ChannelLink.ChannelLinkID(childComplexity), true

	case "channelLink.link":
		if e.complexity.ChannelLink.Link == nil {
			break
		}

		return e.complexity.ChannelLink.Link(childComplexity), true

	case "channelLink.userID":
		if e.complexity.ChannelLink.UserID == nil {
			break
		}

		return e.complexity.ChannelLink.UserID(childComplexity), true

	case "playlistSubscribe.playlistID":
		if e.complexity.PlaylistSubscribe.PlaylistID == nil {
			break
		}

		return e.complexity.PlaylistSubscribe.PlaylistID(childComplexity), true

	case "playlistSubscribe.subscribe":
		if e.complexity.PlaylistSubscribe.Subscribe == nil {
			break
		}

		return e.complexity.PlaylistSubscribe.Subscribe(childComplexity), true

	case "playlistSubscribe.userID":
		if e.complexity.PlaylistSubscribe.UserID == nil {
			break
		}

		return e.complexity.PlaylistSubscribe.UserID(childComplexity), true

	case "userSubscribe.channelID":
		if e.complexity.UserSubscribe.ChannelID == nil {
			break
		}

		return e.complexity.UserSubscribe.ChannelID(childComplexity), true

	case "userSubscribe.channelUserID":
		if e.complexity.UserSubscribe.ChannelUserID == nil {
			break
		}

		return e.complexity.UserSubscribe.ChannelUserID(childComplexity), true

	case "userSubscribe.subscribe":
		if e.complexity.UserSubscribe.Subscribe == nil {
			break
		}

		return e.complexity.UserSubscribe.Subscribe(childComplexity), true

	case "userSubscribe.userID":
		if e.complexity.UserSubscribe.UserID == nil {
			break
		}

		return e.complexity.UserSubscribe.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "graph/PlaylistSubscribe.graphqls", Input: `type playlistSubscribe {
    playlistID: ID!
    userID: ID!
    subscribe: Boolean!
}

input newPlaylistSubscribe{
    playlistID: ID!
    userID: ID!
}

extend type Query {
    retrievePlaylistSub(userID: ID!, playlistID: ID!): playlistSubscribe!
    retrieveAllPlaylistSubs(userID: ID!): [playlistSubscribe!]!
}

extend type Mutation {
    createPlaylistSub(input: newPlaylistSubscribe!): playlistSubscribe!
    updatePlaylistSub(userID: ID!, playlistID: ID!): playlistSubscribe!
    deletePlaylistSub(userID: ID!, playlistID: ID!): Boolean!
    deleteAllPlaylistSubs(playlistID: ID!): Boolean!
}`, BuiltIn: false},
	&ast.Source{Name: "graph/channel.graphqls", Input: `type Channel {
    channelID: ID!
    userID: ID!
    viewCount: Int!
    location: String!
    channelDescription: String!
    channelImage: String!
    channelBanner: String!
    videos: [Video!]!
}

input newChannel {
    userID: ID!
    location: String!
    channelImage: String!
}

extend type Query {
    getChannel(userID: ID!): Channel!
    getChannelId(channelID: ID!): Channel!
}

extend type Mutation{
    createChannel(input: newChannel): Channel!
    updateChannelView(channelID: ID!, viewCount: Int!): Channel!
    updateChannelLocation(channelID: ID!, location: String!): Channel!
    updateChannelDescription(channelID: ID!, description: String!): Channel!
    updateChannelImage(channelID: ID!, channelImage: String!): Channel!
    updateChannelBanner(channelID: ID!, channelBanner: String!): Channel!
    deleteChannel(channelID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/channelCommunity.graphqls", Input: `type ChannelCommunity {
    communityID: ID!
    channelID: ID!
    user: User!
    comDescription: String!
    like: Int!
    dislike: Int!
    day: Int!
    month: Int!
    year: Int!
}

input newChannelCommunity {
    channelID: ID!
    userID: ID!
    day: Int!
    month: Int!
    year: Int!
    comDescription: String!
}

extend type Query {
    channelCommunities(channelID: ID!): [ChannelCommunity!]!
    channelCommunity(communityID: ID!): ChannelCommunity!
}

extend type Mutation {
    createChannelCommunities(input: newChannelCommunity!): ChannelCommunity!
    updateChannelCommunitiesLike(communityID: ID!, like: Boolean!): ChannelCommunity!
    updateChannelCommunitiesDislike(communityID: ID!, dislike: Boolean!): ChannelCommunity!
    deleteChannelCommunities(communityID: ID!): Boolean!
}`, BuiltIn: false},
	&ast.Source{Name: "graph/channelCommunityVali.graphqls", Input: `type ChannelCommunityVali{
    CommunityValiID : ID!
    userID : ID!
    CommunityID : ID!
    like: Boolean!
    dislike: Boolean!
}

input newchannelCommunityVali {
    userID : ID!
    CommunityID : ID!
}

extend type Query {
    channelCommunityVali(communityValiID: ID!, communityID: ID!, userID: ID!): ChannelCommunityVali!
}

extend type Mutation {
    createChannelCommunityVali(input: newchannelCommunityVali): ChannelCommunityVali!
    updateChannelCommunityValiLike(communityValiID: ID!): ChannelCommunityVali!
    updateChannelCommunityValiDislike(communityValiID: ID!): ChannelCommunityVali!
    deleteChannelCommunityVali(communityID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/channelLink.graphqls", Input: `type channelLink {
    channelLinkID: ID!
    userID: ID!
    link: String!
}

input newChannelLink {
    userID: ID!
    link: String!
}

extend type Query {
    retrieveLinks(userID: ID!): [channelLink!]!
}

extend type Mutation {
    createChannelLink(input: newChannelLink!): channelLink!
    updateChannelLink(channelLinkID: ID!, userID: ID!, link: String!): channelLink!
    deleteChannelLink(channelLinkID: ID!, userID: ID!): Boolean!
    deleteAllChannelLink(userID: ID!): Boolean!
}`, BuiltIn: false},
	&ast.Source{Name: "graph/playList.graphqls", Input: `type Playlist {
    playlistID: ID!
    userID: ID!
    videoID: ID!
    playlistHeader: String!
    playlistType: Boolean!
    description : String!
    priorityWeight: Int!
    datePublish: String!
    dateAddToPlaylist: String!
    views: Int!
    totalVideo: Int!
}

input newPlaylist {
    userID: ID!
    playlistHeader: String!
    playlistType: Boolean!
    description : String!
}

input newVideoToPlaylist {
    playlistID: ID!
    userID: ID!
    videoID: ID!
}

extend type Query{
    playlists(userID: ID!): [Playlist!]!
    playlistsPublic(userID: ID!): [Playlist!]!
    priorityNumber(playlistID: ID!): Playlist!
    playlist(playlistID: ID!): Playlist!
    playlistListVideos(playlistID: ID!): [Playlist!]!
    playlistsRandom(userID: ID!): [Playlist!]!
    playlistsByKeyword(keyword: String!): [Playlist!]!
}

extend type Mutation {
    createPlaylist(input: newPlaylist!): Playlist!
    inputVideoToPlayList(input: newVideoToPlaylist!): Playlist!
    updatePriorityWeight(playlistID: ID!, userID: ID!, videoID: ID!, priorityWeight: Int!): Playlist!
    updatePlayListDescription(playlistID: ID!, userID: ID!, description: String!): Playlist!
    updatePlayListViews(playlistID: ID!, userID: ID!): Playlist!
    updatePlayListHeader(playlistID: ID!, userID: ID!, header: String!): Playlist!
    updatePlaylistType(playlistID: ID!, userID: ID!,tipe: Boolean!): Playlist!
    deleteVideo(playlistID: ID!, userID: ID!, videoID: ID!): Boolean!
    deletePlaylist(playlistID: ID!, userID: ID!): Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "graph/replyReplies.graphqls", Input: `type ReplyReplies {
    replyRepliesID: ID!
    replyID: ID!
    user: User!
    like: Int!
    dislike: Int!
    day: Int!
    month: Int!
    year: Int!
    description: String!
}

input newReplyReplies {
    replyID: ID!
    userID: ID!
    day: Int
    month: Int
    year: Int
    description: String!
}

extend type Query {
    replyReply(replyRepliesID: ID!): ReplyReplies!
    listReplyReply(replyID: ID!): [ReplyReplies!]!
}

extend type Mutation {
    createReplyReplies(input: newReplyReplies!): ReplyReplies!
    updateReplyRepliesLikes(replyRepliesID: ID!, like: Boolean!): ReplyReplies!
    updateReplyRepliesDislikes(replyRepliesID: ID!, dislike: Boolean!): ReplyReplies!
    deleteReplyReplies(replyRepliesID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/schema.graphqls", Input: `type Query
type Mutation
`, BuiltIn: false},
	&ast.Source{Name: "graph/user.graphqls", Input: `type User {
    id: ID!
    email: String!
    username: String!
    premium: Boolean!
    location: String!
    subscribers : Int!
    restriction : Boolean!
    premiumDayCount: Int!
    thumbnail : String
    date: String!
}

extend type Query{
    Users(email: String!): User
    userById(id: ID!): User!
    listUsers: [User!]!
    getUserByKeyword(keyword: String!): [User!]!
}

input newUser {
    email: String!
    username: String!
    location: String!
    thumbnail: String
}

extend type Mutation {
    createUser(input: newUser): User
    updatePremium(id: ID!, premium: Boolean!): User!
    updatePremiumCountDay(id: ID!, premiumDayCount: Int!): User!
    updateLocation(id: ID!, location: String!): User!
    updateSubscribers(id: ID!, subscribe: Boolean!): User!
    updateRestrictionUser(id: ID!, restriction: Boolean!): User!
}
`, BuiltIn: false},
	&ast.Source{Name: "graph/userSubscribe.graphqls", Input: `type userSubscribe {
    userID: ID!
    channelID: ID!
    subscribe: Boolean!
    channelUserID: ID!
}

input newUserSubscribe {
    userID: ID!
    channelID: ID!
    channelUserID: ID!
}

extend type Query {
    userSubscribes(userID: ID!): [userSubscribe!]!
    channelSubscribe(channelID: ID!): userSubscribe
    getChannelSubscribe(userID: ID!): [userSubscribe!]!
}

extend type Mutation {
    createUserSubscribe(input: newUserSubscribe): userSubscribe!
    updateUserSubscribe(userID: ID!, channelID: ID!): userSubscribe!
    deleteUserSubscribe(userID: ID!, channelID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/vidReplyCheck.graphqls", Input: ``, BuiltIn: false},
	&ast.Source{Name: "graph/video.graphqls", Input: `
type Video {
    videoID: ID!
    user: User!
    title: String
    thumbnail: String
    views: Int
    day: Int
    month: Int
    year: Int
    like: Int
    dislike: Int
    descriptions: String
    sourceLink : String
    category: String
    videoLength: Int
    location : String
    restriction: Boolean
    premium: Boolean
    typePub: Boolean!
    videoReply: [VideoReply!]!
}

extend type Query {
    Videos(videoID: ID!): Video
    listVideos: [Video!]!
    videoByLocation(location: String!, restriction: Boolean!, premium: Boolean!): [Video!]!
    videoByLocationSort(restriction: Boolean!, premium: Boolean!): [Video!]!
    videoByCategory(category: String!, restriction: Boolean!, premium: Boolean!): [Video!]!
    videoByUser(userID: ID!, restriction: Boolean!, premium: Boolean!): [Video!]!
    videoTotalViews(userID: ID!): Int!
    premiumVideos: [Video!]!
    getLastVideos(userID: ID!, premium: Boolean!, restriction: Boolean!): Video!
    getFiveRandomVideos(userID: ID!, restriction: Boolean!, premium: Boolean!): [Video!]!
    getVideoByKeyword(keyword: String!): [Video!]!
    getVideoByKeywordTopFive(keyword: String!): [Video!]!
    retrieveAllVideos(userID: ID!): [Video!]!
}

input newVideo {
    userID: ID!
    title: String
    thumbnail: String
    day: Int
    Month: Int
    Year: Int
    descriptions: String
    sourceLink: String
    category: String
    VideoLength: Int
    location: String
    premium: Boolean
    restriction: Boolean
    typePub: Boolean!
}

extend  type Mutation {
    createVideo(input: newVideo): Video
    updateViews(VideoID: ID!): Video!
    updateLike(VideoID: ID!, likeVal: Boolean!): Video!
    updateDislike(VideoID: ID!, likeVal: Boolean!): Video!
    updateDescription(VideoID: ID!, descriptions: String): Video!
    updateRestriction(VideoID: ID!, restriction: Boolean): Video!
    updatePremiumVideo(VideoID: ID!, premium: Boolean): Video!
    updateVideoType(VideoID: ID!, typePub: Boolean!): Video!
    updateVideo(VideoID: ID!, desc: String!, title: String!, thumbnail: String!, privacy: Boolean!): Video!
    removeVideo(VideoID: ID!): Boolean!
}`, BuiltIn: false},
	&ast.Source{Name: "graph/videoLikeVali.graphqls", Input: `type VideoLikeVali {
    userID: ID!
    videoID: ID!
    like: Boolean!
    dislike: Boolean!
}

input newVideoLikeVali {
    userID: ID!
    videoID: ID!
}

extend type Query {
    videoLikeVali(userID: ID!, videoID: ID!): VideoLikeVali
}

extend type Mutation {
    createVideoLikeVali(input: newVideoLikeVali): VideoLikeVali!
    updateVideoLikeVali(videoID: ID!, userID: ID!): VideoLikeVali!
    updateVideoDislikeVali(videoID: ID!, userID: ID!): VideoLikeVali!
    deleteVideoLikeVali(videoID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/videoReply.graphqls", Input: `type VideoReply {
    replyID: ID!
    user: User!
    videoID: ID!
    likes: Int!
    day: Int!
    month: Int!
    year: Int!
    dislikes: Int!
    description: String!
    replyReplies: [ReplyReplies!]!
}

input newVideoReply {
    userID: ID!
    videoID: ID!
    day: Int!
    month: Int!
    year: Int!
    description: String!
}

extend type Query {
    videoReplies(videoID: ID!): [VideoReply!]!
    videoReply(userID: ID!, videoID: ID!): VideoReply!
}

extend type Mutation {
    createVideoReply(input: newVideoReply!): VideoReply!
    updateReplyLikes(replyID: ID!, like: Boolean!): VideoReply!
    updateReplyDislikes(replyID: ID!, dislike: Boolean!): VideoReply!
    updateReplyDescription(replyID: ID!, description: String!): VideoReply!
    deleteReply(replyID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/videoReplyLikeVali.graphqls", Input: `type VideoReplyLikeVali {
    userID: ID!
    videoID: ID!
    replyID: ID!
    like: Boolean!
    dislike: Boolean!
}

input newVideoReplyLikeVali {
    userID: ID!
    videoID: ID!
    replyID: ID!
}

extend type Query {
    videoReplyLikeVali(userID: ID!,videoID: ID!, replyID: ID!): VideoReplyLikeVali
}

extend type Mutation {
    createNewVideoReplyLikeVali(input: newVideoReplyLikeVali!): VideoReplyLikeVali!
    updateVideoReplyLikeVali(userID: ID!, videoID: ID!, replyID: ID!): VideoReplyLikeVali!
    updateVideoReplyDislikeVali(userID: ID!, videoID: ID!, replyID: ID): VideoReplyLikeVali!
    deleteVideoReplyLikeVali(videoID: ID!, replyID: ID!): Boolean
}`, BuiltIn: false},
	&ast.Source{Name: "graph/videoReplyRepliesLikeVali.graphqls", Input: `type VideoReplyRepliesLikeVali{
    videoReplyRepliesLikeValiID: ID!
    replyRepliesID: ID!
    userID: ID!
    replyID: ID!
    videoID: ID!
    like: Boolean!
    dislike: Boolean!
}

input newVideoReplyRepliesLikeVali {
    userID: ID!
    replyRepliesID: ID!
    replyID: ID!
    videoID: ID!
}

extend type Query {
    videoReplyRepliesLikeVali(videoReplyRepliesLikeValiID: ID!): VideoReplyRepliesLikeVali!
}

extend type Mutation {
    createNewVideoReplyRepliesLikeVali(input: newVideoReplyRepliesLikeVali): VideoReplyRepliesLikeVali!
    updateVideReplyRepliesLikeVali(videoReplyRepliesLikeValiID: ID!, userID: ID!, replyID: ID!, videoID: ID!, replyRepliesID: ID!): VideoReplyRepliesLikeVali!
    updateVideoReplyRepliesDislikeVali(videoReplyRepliesLikeValiID: ID!, userID: ID!, replyID: ID!, videoID: ID!, replyRepliesID: ID!): VideoReplyRepliesLikeVali!
    deleteVideoReplyRepliesLikeVali(videoReplyRepliesLikeValiID: ID!): Boolean
    deleteListVideoReplyReplyLikeVali(videoID: ID!, replyID: ID!): Boolean
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createChannelCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewChannelCommunity
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewChannelCommunity2TPABackEndᚋgraphᚋmodelᚐNewChannelCommunity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelCommunityVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewchannelCommunityVali
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewchannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewchannelCommunityVali(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewChannelLink
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewChannelLink2TPABackEndᚋgraphᚋmodelᚐNewChannelLink(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewChannel
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewChannel2ᚖTPABackEndᚋgraphᚋmodelᚐNewChannel(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNewVideoReplyLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVideoReplyLikeVali
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewVideoReplyLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoReplyLikeVali(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNewVideoReplyRepliesLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewVideoReplyRepliesLikeVali
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideoReplyRepliesLikeVali(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlaylistSub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewPlaylistSubscribe
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewPlaylistSubscribe2TPABackEndᚋgraphᚋmodelᚐNewPlaylistSubscribe(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlaylist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewPlaylist
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewPlaylist2TPABackEndᚋgraphᚋmodelᚐNewPlaylist(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createReplyReplies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewReplyReplies
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewReplyReplies2TPABackEndᚋgraphᚋmodelᚐNewReplyReplies(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewUserSubscribe
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewUserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐNewUserSubscribe(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewUser
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewUser2ᚖTPABackEndᚋgraphᚋmodelᚐNewUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVideoLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewVideoLikeVali
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideoLikeVali(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVideoReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVideoReply
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewVideoReply2TPABackEndᚋgraphᚋmodelᚐNewVideoReply(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewVideo
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOnewVideo2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAllChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAllPlaylistSubs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelCommunityVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelLinkID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelLinkID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteListVideoReplyReplyLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlaylistSub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlaylist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReplyReplies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVideoLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVideoReplyLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVideoReplyRepliesLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoReplyRepliesLikeValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoReplyRepliesLikeValiID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_inputVideoToPlayList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVideoToPlaylist
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNnewVideoToPlaylist2TPABackEndᚋgraphᚋmodelᚐNewVideoToPlaylist(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelBanner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["channelBanner"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelBanner"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelCommunitiesDislike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["dislike"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dislike"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelCommunitiesLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["like"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["like"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelCommunityValiDislike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityValiID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelCommunityValiLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityValiID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["description"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["channelImage"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelImage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelLinkID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelLinkID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["link"]; ok {
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["link"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["location"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["location"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelView_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["viewCount"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["viewCount"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["descriptions"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["descriptions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDislike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["likeVal"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["likeVal"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["likeVal"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["likeVal"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["location"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["location"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlayListDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["description"]; ok {
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlayListHeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["header"]; ok {
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["header"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlayListViews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlaylistSub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlaylistType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["tipe"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tipe"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePremiumCountDay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["premiumDayCount"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premiumDayCount"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePremiumVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePremium_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePriorityWeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["priorityWeight"]; ok {
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["priorityWeight"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["description"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyDislikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["dislike"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dislike"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["like"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["like"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyRepliesDislikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["dislike"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dislike"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyRepliesLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["like"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["like"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRestrictionUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRestriction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSubscribers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["subscribe"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subscribe"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideReplyRepliesLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoReplyRepliesLikeValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoReplyRepliesLikeValiID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg3, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg4, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoDislikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoReplyDislikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg2, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoReplyLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoReplyRepliesDislikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoReplyRepliesLikeValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoReplyRepliesLikeValiID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg3, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg4, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideoType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["typePub"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["typePub"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["desc"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["desc"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["title"]; ok {
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["thumbnail"]; ok {
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["thumbnail"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["privacy"]; ok {
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["privacy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateViews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["VideoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VideoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Videos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelCommunityVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityValiID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_channelCommunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChannelId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChannelSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getFiveRandomVideos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getLastVideos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getUserByKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["keyword"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keyword"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVideoByKeywordTopFive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["keyword"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keyword"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVideoByKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["keyword"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keyword"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listReplyReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlistListVideos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlistsByKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["keyword"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keyword"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlistsPublic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlistsRandom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_playlists_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_priorityNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_replyReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["replyRepliesID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyRepliesID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrieveAllPlaylistSubs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrieveAllVideos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrieveLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePlaylistSub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["playlistID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["playlistID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_userById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userSubscribes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_videoByCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["category"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_videoByLocationSort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_videoByLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["location"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["location"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_videoByUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["restriction"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["restriction"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["premium"]; ok {
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["premium"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_videoLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_videoReplies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_videoReplyLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["replyID"]; ok {
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["replyID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_videoReplyRepliesLikeVali_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["videoReplyRepliesLikeValiID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoReplyRepliesLikeValiID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_videoReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["videoID"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videoID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_videoTotalViews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Channel_channelID(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_userID(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_viewCount(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_location(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_channelDescription(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_channelImage(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_channelBanner(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelBanner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Channel_videos(ctx context.Context, field graphql.CollectedField, obj *model.Channel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Channel",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Videos(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_communityID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_channelID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_user(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChannelCommunity().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_comDescription(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_like(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_dislike(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_day(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_month(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunity_year(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunityVali_CommunityValiID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunityVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunityVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityValiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunityVali_userID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunityVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunityVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunityVali_CommunityID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunityVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunityVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunityVali_like(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunityVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunityVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ChannelCommunityVali_dislike(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCommunityVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChannelCommunityVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPlaylistSub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPlaylistSub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePlaylistSub(rctx, args["input"].(model.NewPlaylistSubscribe))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PlaylistSubscribe)
	fc.Result = res
	return ec.marshalNplaylistSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlaylistSub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlaylistSub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlaylistSub(rctx, args["userID"].(string), args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PlaylistSubscribe)
	fc.Result = res
	return ec.marshalNplaylistSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePlaylistSub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePlaylistSub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePlaylistSub(rctx, args["userID"].(string), args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPlaylistSubs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAllPlaylistSubs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPlaylistSubs(rctx, args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannel(rctx, args["input"].(*model.NewChannel))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelView(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelView_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelView(rctx, args["channelID"].(string), args["viewCount"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelLocation(rctx, args["channelID"].(string), args["location"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelDescription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelDescription(rctx, args["channelID"].(string), args["description"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelImage(rctx, args["channelID"].(string), args["channelImage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelBanner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelBanner_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelBanner(rctx, args["channelID"].(string), args["channelBanner"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannel(rctx, args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChannelCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createChannelCommunities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelCommunities(rctx, args["input"].(model.NewChannelCommunity))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunity)
	fc.Result = res
	return ec.marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelCommunitiesLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelCommunitiesLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelCommunitiesLike(rctx, args["communityID"].(string), args["like"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunity)
	fc.Result = res
	return ec.marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelCommunitiesDislike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelCommunitiesDislike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelCommunitiesDislike(rctx, args["communityID"].(string), args["dislike"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunity)
	fc.Result = res
	return ec.marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteChannelCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteChannelCommunities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelCommunities(rctx, args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChannelCommunityVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createChannelCommunityVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelCommunityVali(rctx, args["input"].(*model.NewchannelCommunityVali))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunityVali)
	fc.Result = res
	return ec.marshalNChannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelCommunityValiLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelCommunityValiLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelCommunityValiLike(rctx, args["communityValiID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunityVali)
	fc.Result = res
	return ec.marshalNChannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelCommunityValiDislike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelCommunityValiDislike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelCommunityValiDislike(rctx, args["communityValiID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunityVali)
	fc.Result = res
	return ec.marshalNChannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteChannelCommunityVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteChannelCommunityVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelCommunityVali(rctx, args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createChannelLink_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelLink(rctx, args["input"].(model.NewChannelLink))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelLink)
	fc.Result = res
	return ec.marshalNchannelLink2ᚖTPABackEndᚋgraphᚋmodelᚐChannelLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChannelLink_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelLink(rctx, args["channelLinkID"].(string), args["userID"].(string), args["link"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelLink)
	fc.Result = res
	return ec.marshalNchannelLink2ᚖTPABackEndᚋgraphᚋmodelᚐChannelLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteChannelLink_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelLink(rctx, args["channelLinkID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAllChannelLink_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllChannelLink(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPlaylist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPlaylist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePlaylist(rctx, args["input"].(model.NewPlaylist))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_inputVideoToPlayList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_inputVideoToPlayList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InputVideoToPlayList(rctx, args["input"].(model.NewVideoToPlaylist))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePriorityWeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePriorityWeight_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePriorityWeight(rctx, args["playlistID"].(string), args["userID"].(string), args["videoID"].(string), args["priorityWeight"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlayListDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlayListDescription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlayListDescription(rctx, args["playlistID"].(string), args["userID"].(string), args["description"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlayListViews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlayListViews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlayListViews(rctx, args["playlistID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlayListHeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlayListHeader_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlayListHeader(rctx, args["playlistID"].(string), args["userID"].(string), args["header"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlaylistType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlaylistType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlaylistType(rctx, args["playlistID"].(string), args["userID"].(string), args["tipe"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVideo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideo(rctx, args["playlistID"].(string), args["userID"].(string), args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePlaylist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePlaylist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePlaylist(rctx, args["playlistID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createReplyReplies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createReplyReplies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReplyReplies(rctx, args["input"].(model.NewReplyReplies))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReplyRepliesLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReplyRepliesLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyRepliesLikes(rctx, args["replyRepliesID"].(string), args["like"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReplyRepliesDislikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReplyRepliesDislikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyRepliesDislikes(rctx, args["replyRepliesID"].(string), args["dislike"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteReplyReplies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteReplyReplies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReplyReplies(rctx, args["replyRepliesID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(*model.NewUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePremium(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePremium_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePremium(rctx, args["id"].(string), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePremiumCountDay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePremiumCountDay_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePremiumCountDay(rctx, args["id"].(string), args["premiumDayCount"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLocation(rctx, args["id"].(string), args["location"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSubscribers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSubscribers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSubscribers(rctx, args["id"].(string), args["subscribe"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRestrictionUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRestrictionUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRestrictionUser(rctx, args["id"].(string), args["restriction"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUserSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUserSubscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserSubscribe(rctx, args["input"].(*model.NewUserSubscribe))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserSubscribe)
	fc.Result = res
	return ec.marshalNuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserSubscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserSubscribe(rctx, args["userID"].(string), args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserSubscribe)
	fc.Result = res
	return ec.marshalNuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUserSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUserSubscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserSubscribe(rctx, args["userID"].(string), args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVideo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVideo(rctx, args["input"].(*model.NewVideo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalOVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateViews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateViews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateViews(rctx, args["VideoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLike(rctx, args["VideoID"].(string), args["likeVal"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDislike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDislike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDislike(rctx, args["VideoID"].(string), args["likeVal"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDescription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDescription(rctx, args["VideoID"].(string), args["descriptions"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRestriction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRestriction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRestriction(rctx, args["VideoID"].(string), args["restriction"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePremiumVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePremiumVideo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePremiumVideo(rctx, args["VideoID"].(string), args["premium"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoType(rctx, args["VideoID"].(string), args["typePub"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideo(rctx, args["VideoID"].(string), args["desc"].(string), args["title"].(string), args["thumbnail"].(string), args["privacy"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeVideo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveVideo(rctx, args["VideoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVideoLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVideoLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVideoLikeVali(rctx, args["input"].(*model.NewVideoLikeVali))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoLikeVali)
	fc.Result = res
	return ec.marshalNVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoLikeVali(rctx, args["videoID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoLikeVali)
	fc.Result = res
	return ec.marshalNVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoDislikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoDislikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoDislikeVali(rctx, args["videoID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoLikeVali)
	fc.Result = res
	return ec.marshalNVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVideoLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVideoLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideoLikeVali(rctx, args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVideoReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVideoReply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVideoReply(rctx, args["input"].(model.NewVideoReply))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReplyLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReplyLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyLikes(rctx, args["replyID"].(string), args["like"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReplyDislikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReplyDislikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyDislikes(rctx, args["replyID"].(string), args["dislike"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReplyDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReplyDescription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyDescription(rctx, args["replyID"].(string), args["description"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteReply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReply(rctx, args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNewVideoReplyLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNewVideoReplyLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNewVideoReplyLikeVali(rctx, args["input"].(model.NewVideoReplyLikeVali))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoReplyLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoReplyLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoReplyLikeVali(rctx, args["userID"].(string), args["videoID"].(string), args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoReplyDislikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoReplyDislikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoReplyDislikeVali(rctx, args["userID"].(string), args["videoID"].(string), args["replyID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVideoReplyLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVideoReplyLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideoReplyLikeVali(rctx, args["videoID"].(string), args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNewVideoReplyRepliesLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNewVideoReplyRepliesLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNewVideoReplyRepliesLikeVali(rctx, args["input"].(*model.NewVideoReplyRepliesLikeVali))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyRepliesLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideReplyRepliesLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideReplyRepliesLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideReplyRepliesLikeVali(rctx, args["videoReplyRepliesLikeValiID"].(string), args["userID"].(string), args["replyID"].(string), args["videoID"].(string), args["replyRepliesID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyRepliesLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVideoReplyRepliesDislikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVideoReplyRepliesDislikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoReplyRepliesDislikeVali(rctx, args["videoReplyRepliesLikeValiID"].(string), args["userID"].(string), args["replyID"].(string), args["videoID"].(string), args["replyRepliesID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyRepliesLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVideoReplyRepliesLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVideoReplyRepliesLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideoReplyRepliesLikeVali(rctx, args["videoReplyRepliesLikeValiID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteListVideoReplyReplyLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteListVideoReplyReplyLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteListVideoReplyReplyLikeVali(rctx, args["videoID"].(string), args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_playlistID(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaylistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_userID(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_videoID(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_playlistHeader(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaylistHeader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_playlistType(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaylistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_description(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_priorityWeight(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_datePublish(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatePublish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_dateAddToPlaylist(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateAddToPlaylist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_views(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Views, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Playlist_totalVideo(ctx context.Context, field graphql.CollectedField, obj *model.Playlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Playlist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalVideo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePlaylistSub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePlaylistSub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePlaylistSub(rctx, args["userID"].(string), args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PlaylistSubscribe)
	fc.Result = res
	return ec.marshalNplaylistSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrieveAllPlaylistSubs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrieveAllPlaylistSubs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveAllPlaylistSubs(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PlaylistSubscribe)
	fc.Result = res
	return ec.marshalNplaylistSubscribe2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChannel(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChannelId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChannelId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChannelID(rctx, args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_channelCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_channelCommunities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelCommunities(rctx, args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelCommunity)
	fc.Result = res
	return ec.marshalNChannelCommunity2ᚕᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_channelCommunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_channelCommunity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelCommunity(rctx, args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunity)
	fc.Result = res
	return ec.marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_channelCommunityVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_channelCommunityVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelCommunityVali(rctx, args["communityValiID"].(string), args["communityID"].(string), args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCommunityVali)
	fc.Result = res
	return ec.marshalNChannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrieveLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrieveLinks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveLinks(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelLink)
	fc.Result = res
	return ec.marshalNchannelLink2ᚕᚖTPABackEndᚋgraphᚋmodelᚐChannelLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlists(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlists_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Playlists(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlistsPublic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlistsPublic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlaylistsPublic(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_priorityNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_priorityNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PriorityNumber(rctx, args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Playlist(rctx, args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlistListVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlistListVideos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlaylistListVideos(rctx, args["playlistID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlistsRandom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlistsRandom_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlaylistsRandom(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_playlistsByKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_playlistsByKeyword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlaylistsByKeyword(rctx, args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Playlist)
	fc.Result = res
	return ec.marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_replyReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_replyReply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReplyReply(rctx, args["replyRepliesID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listReplyReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listReplyReply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListReplyReply(rctx, args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚕᚖTPABackEndᚋgraphᚋmodelᚐReplyRepliesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUsers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserByKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserByKeyword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserByKeyword(rctx, args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userSubscribes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userSubscribes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserSubscribes(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserSubscribe)
	fc.Result = res
	return ec.marshalNuserSubscribe2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_channelSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_channelSubscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelSubscribe(rctx, args["channelID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSubscribe)
	fc.Result = res
	return ec.marshalOuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChannelSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChannelSubscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChannelSubscribe(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserSubscribe)
	fc.Result = res
	return ec.marshalNuserSubscribe2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Videos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Videos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Videos(rctx, args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalOVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListVideos(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoByLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoByLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoByLocation(rctx, args["location"].(string), args["restriction"].(bool), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoByLocationSort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoByLocationSort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoByLocationSort(rctx, args["restriction"].(bool), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoByCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoByCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoByCategory(rctx, args["category"].(string), args["restriction"].(bool), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoByUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoByUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoByUser(rctx, args["userID"].(string), args["restriction"].(bool), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoTotalViews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoTotalViews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoTotalViews(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_premiumVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PremiumVideos(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getLastVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getLastVideos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLastVideos(rctx, args["userID"].(string), args["premium"].(bool), args["restriction"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getFiveRandomVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getFiveRandomVideos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFiveRandomVideos(rctx, args["userID"].(string), args["restriction"].(bool), args["premium"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVideoByKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVideoByKeyword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVideoByKeyword(rctx, args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVideoByKeywordTopFive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVideoByKeywordTopFive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVideoByKeywordTopFive(rctx, args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrieveAllVideos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrieveAllVideos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveAllVideos(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Video)
	fc.Result = res
	return ec.marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoLikeVali(rctx, args["userID"].(string), args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoLikeVali)
	fc.Result = res
	return ec.marshalOVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoReplies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoReplies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoReplies(rctx, args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoReply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoReply(rctx, args["userID"].(string), args["videoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoReplyLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoReplyLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoReplyLikeVali(rctx, args["userID"].(string), args["videoID"].(string), args["replyID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyLikeVali)
	fc.Result = res
	return ec.marshalOVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videoReplyRepliesLikeVali(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videoReplyRepliesLikeVali_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoReplyRepliesLikeVali(rctx, args["videoReplyRepliesLikeValiID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoReplyRepliesLikeVali)
	fc.Result = res
	return ec.marshalNVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_replyRepliesID(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyRepliesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_replyID(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_user(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReplyReplies().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_like(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_dislike(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_day(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalNInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_month(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalNInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_year(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalNInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplyReplies_description(ctx context.Context, field graphql.CollectedField, obj *model.ReplyReplies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplyReplies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_premium(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Premium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_subscribers(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _User_restriction(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restriction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_premiumDayCount(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PremiumDayCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _User_thumbnail(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_date(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_videoID(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_user(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Video().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_title(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_thumbnail(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_views(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Views, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_day(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_month(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_year(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_like(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_dislike(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_descriptions(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_sourceLink(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_category(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_videoLength(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_location(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_restriction(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restriction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_premium(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Premium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_typePub(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypePub, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Video_videoReply(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Video",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Video().VideoReply(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VideoReply)
	fc.Result = res
	return ec.marshalNVideoReply2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoLikeVali_userID(ctx context.Context, field graphql.CollectedField, obj *model.VideoLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoLikeVali_videoID(ctx context.Context, field graphql.CollectedField, obj *model.VideoLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoLikeVali_like(ctx context.Context, field graphql.CollectedField, obj *model.VideoLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoLikeVali_dislike(ctx context.Context, field graphql.CollectedField, obj *model.VideoLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_replyID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_user(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VideoReply().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_videoID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_likes(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_day(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_month(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_year(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_dislikes(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_description(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReply_replyReplies(ctx context.Context, field graphql.CollectedField, obj *model.VideoReply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReply",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VideoReply().ReplyReplies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReplyReplies)
	fc.Result = res
	return ec.marshalNReplyReplies2ᚕᚖTPABackEndᚋgraphᚋmodelᚐReplyRepliesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyLikeVali_userID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyLikeVali_videoID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyLikeVali_replyID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyLikeVali_like(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyLikeVali_dislike(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_videoReplyRepliesLikeValiID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoReplyRepliesLikeValiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_replyRepliesID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyRepliesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_userID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_replyID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_videoID(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_like(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoReplyRepliesLikeVali_dislike(ctx context.Context, field graphql.CollectedField, obj *model.VideoReplyRepliesLikeVali) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VideoReplyRepliesLikeVali",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dislike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _channelLink_channelLinkID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "channelLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelLinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _channelLink_userID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "channelLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _channelLink_link(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "channelLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _playlistSubscribe_playlistID(ctx context.Context, field graphql.CollectedField, obj *model.PlaylistSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "playlistSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaylistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _playlistSubscribe_userID(ctx context.Context, field graphql.CollectedField, obj *model.PlaylistSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "playlistSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _playlistSubscribe_subscribe(ctx context.Context, field graphql.CollectedField, obj *model.PlaylistSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "playlistSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _userSubscribe_userID(ctx context.Context, field graphql.CollectedField, obj *model.UserSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "userSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userSubscribe_channelID(ctx context.Context, field graphql.CollectedField, obj *model.UserSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "userSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userSubscribe_subscribe(ctx context.Context, field graphql.CollectedField, obj *model.UserSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "userSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _userSubscribe_channelUserID(ctx context.Context, field graphql.CollectedField, obj *model.UserSubscribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "userSubscribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputnewChannel(ctx context.Context, obj interface{}) (model.NewChannel, error) {
	var it model.NewChannel
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channelImage":
			var err error
			it.ChannelImage, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewChannelCommunity(ctx context.Context, obj interface{}) (model.NewChannelCommunity, error) {
	var it model.NewChannelCommunity
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channelID":
			var err error
			it.ChannelID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error
			it.Day, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error
			it.Month, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "comDescription":
			var err error
			it.ComDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewChannelLink(ctx context.Context, obj interface{}) (model.NewChannelLink, error) {
	var it model.NewChannelLink
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error
			it.Link, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewPlaylist(ctx context.Context, obj interface{}) (model.NewPlaylist, error) {
	var it model.NewPlaylist
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "playlistHeader":
			var err error
			it.PlaylistHeader, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "playlistType":
			var err error
			it.PlaylistType, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewPlaylistSubscribe(ctx context.Context, obj interface{}) (model.NewPlaylistSubscribe, error) {
	var it model.NewPlaylistSubscribe
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "playlistID":
			var err error
			it.PlaylistID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewReplyReplies(ctx context.Context, obj interface{}) (model.NewReplyReplies, error) {
	var it model.NewReplyReplies
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "replyID":
			var err error
			it.ReplyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewUser(ctx context.Context, obj interface{}) (model.NewUser, error) {
	var it model.NewUser
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnail":
			var err error
			it.Thumbnail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewUserSubscribe(ctx context.Context, obj interface{}) (model.NewUserSubscribe, error) {
	var it model.NewUserSubscribe
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channelID":
			var err error
			it.ChannelID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channelUserID":
			var err error
			it.ChannelUserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideo(ctx context.Context, obj interface{}) (model.NewVideo, error) {
	var it model.NewVideo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnail":
			var err error
			it.Thumbnail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Month":
			var err error
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Year":
			var err error
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptions":
			var err error
			it.Descriptions, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceLink":
			var err error
			it.SourceLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "VideoLength":
			var err error
			it.VideoLength, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "premium":
			var err error
			it.Premium, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "restriction":
			var err error
			it.Restriction, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "typePub":
			var err error
			it.TypePub, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideoLikeVali(ctx context.Context, obj interface{}) (model.NewVideoLikeVali, error) {
	var it model.NewVideoLikeVali
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoID":
			var err error
			it.VideoID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideoReply(ctx context.Context, obj interface{}) (model.NewVideoReply, error) {
	var it model.NewVideoReply
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoID":
			var err error
			it.VideoID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error
			it.Day, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error
			it.Month, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideoReplyLikeVali(ctx context.Context, obj interface{}) (model.NewVideoReplyLikeVali, error) {
	var it model.NewVideoReplyLikeVali
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoID":
			var err error
			it.VideoID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replyID":
			var err error
			it.ReplyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideoReplyRepliesLikeVali(ctx context.Context, obj interface{}) (model.NewVideoReplyRepliesLikeVali, error) {
	var it model.NewVideoReplyRepliesLikeVali
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replyRepliesID":
			var err error
			it.ReplyRepliesID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replyID":
			var err error
			it.ReplyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoID":
			var err error
			it.VideoID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewVideoToPlaylist(ctx context.Context, obj interface{}) (model.NewVideoToPlaylist, error) {
	var it model.NewVideoToPlaylist
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "playlistID":
			var err error
			it.PlaylistID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoID":
			var err error
			it.VideoID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewchannelCommunityVali(ctx context.Context, obj interface{}) (model.NewchannelCommunityVali, error) {
	var it model.NewchannelCommunityVali
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "CommunityID":
			var err error
			it.CommunityID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var channelImplementors = []string{"Channel"}

func (ec *executionContext) _Channel(ctx context.Context, sel ast.SelectionSet, obj *model.Channel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Channel")
		case "channelID":
			out.Values[i] = ec._Channel_channelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userID":
			out.Values[i] = ec._Channel_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "viewCount":
			out.Values[i] = ec._Channel_viewCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "location":
			out.Values[i] = ec._Channel_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "channelDescription":
			out.Values[i] = ec._Channel_channelDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "channelImage":
			out.Values[i] = ec._Channel_channelImage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "channelBanner":
			out.Values[i] = ec._Channel_channelBanner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "videos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_videos(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var channelCommunityImplementors = []string{"ChannelCommunity"}

func (ec *executionContext) _ChannelCommunity(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelCommunity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelCommunityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelCommunity")
		case "communityID":
			out.Values[i] = ec._ChannelCommunity_communityID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "channelID":
			out.Values[i] = ec._ChannelCommunity_channelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChannelCommunity_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "comDescription":
			out.Values[i] = ec._ChannelCommunity_comDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "like":
			out.Values[i] = ec._ChannelCommunity_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dislike":
			out.Values[i] = ec._ChannelCommunity_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "day":
			out.Values[i] = ec._ChannelCommunity_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "month":
			out.Values[i] = ec._ChannelCommunity_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "year":
			out.Values[i] = ec._ChannelCommunity_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var channelCommunityValiImplementors = []string{"ChannelCommunityVali"}

func (ec *executionContext) _ChannelCommunityVali(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelCommunityVali) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelCommunityValiImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelCommunityVali")
		case "CommunityValiID":
			out.Values[i] = ec._ChannelCommunityVali_CommunityValiID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._ChannelCommunityVali_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CommunityID":
			out.Values[i] = ec._ChannelCommunityVali_CommunityID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "like":
			out.Values[i] = ec._ChannelCommunityVali_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dislike":
			out.Values[i] = ec._ChannelCommunityVali_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createPlaylistSub":
			out.Values[i] = ec._Mutation_createPlaylistSub(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlaylistSub":
			out.Values[i] = ec._Mutation_updatePlaylistSub(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlaylistSub":
			out.Values[i] = ec._Mutation_deletePlaylistSub(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPlaylistSubs":
			out.Values[i] = ec._Mutation_deleteAllPlaylistSubs(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createChannel":
			out.Values[i] = ec._Mutation_createChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelView":
			out.Values[i] = ec._Mutation_updateChannelView(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelLocation":
			out.Values[i] = ec._Mutation_updateChannelLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelDescription":
			out.Values[i] = ec._Mutation_updateChannelDescription(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelImage":
			out.Values[i] = ec._Mutation_updateChannelImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelBanner":
			out.Values[i] = ec._Mutation_updateChannelBanner(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteChannel":
			out.Values[i] = ec._Mutation_deleteChannel(ctx, field)
		case "createChannelCommunities":
			out.Values[i] = ec._Mutation_createChannelCommunities(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelCommunitiesLike":
			out.Values[i] = ec._Mutation_updateChannelCommunitiesLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelCommunitiesDislike":
			out.Values[i] = ec._Mutation_updateChannelCommunitiesDislike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteChannelCommunities":
			out.Values[i] = ec._Mutation_deleteChannelCommunities(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createChannelCommunityVali":
			out.Values[i] = ec._Mutation_createChannelCommunityVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelCommunityValiLike":
			out.Values[i] = ec._Mutation_updateChannelCommunityValiLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelCommunityValiDislike":
			out.Values[i] = ec._Mutation_updateChannelCommunityValiDislike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteChannelCommunityVali":
			out.Values[i] = ec._Mutation_deleteChannelCommunityVali(ctx, field)
		case "createChannelLink":
			out.Values[i] = ec._Mutation_createChannelLink(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateChannelLink":
			out.Values[i] = ec._Mutation_updateChannelLink(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteChannelLink":
			out.Values[i] = ec._Mutation_deleteChannelLink(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllChannelLink":
			out.Values[i] = ec._Mutation_deleteAllChannelLink(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlaylist":
			out.Values[i] = ec._Mutation_createPlaylist(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inputVideoToPlayList":
			out.Values[i] = ec._Mutation_inputVideoToPlayList(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePriorityWeight":
			out.Values[i] = ec._Mutation_updatePriorityWeight(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlayListDescription":
			out.Values[i] = ec._Mutation_updatePlayListDescription(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlayListViews":
			out.Values[i] = ec._Mutation_updatePlayListViews(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlayListHeader":
			out.Values[i] = ec._Mutation_updatePlayListHeader(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlaylistType":
			out.Values[i] = ec._Mutation_updatePlaylistType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVideo":
			out.Values[i] = ec._Mutation_deleteVideo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlaylist":
			out.Values[i] = ec._Mutation_deletePlaylist(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createReplyReplies":
			out.Values[i] = ec._Mutation_createReplyReplies(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyRepliesLikes":
			out.Values[i] = ec._Mutation_updateReplyRepliesLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyRepliesDislikes":
			out.Values[i] = ec._Mutation_updateReplyRepliesDislikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReplyReplies":
			out.Values[i] = ec._Mutation_deleteReplyReplies(ctx, field)
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
		case "updatePremium":
			out.Values[i] = ec._Mutation_updatePremium(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePremiumCountDay":
			out.Values[i] = ec._Mutation_updatePremiumCountDay(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLocation":
			out.Values[i] = ec._Mutation_updateLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSubscribers":
			out.Values[i] = ec._Mutation_updateSubscribers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRestrictionUser":
			out.Values[i] = ec._Mutation_updateRestrictionUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUserSubscribe":
			out.Values[i] = ec._Mutation_createUserSubscribe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserSubscribe":
			out.Values[i] = ec._Mutation_updateUserSubscribe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUserSubscribe":
			out.Values[i] = ec._Mutation_deleteUserSubscribe(ctx, field)
		case "createVideo":
			out.Values[i] = ec._Mutation_createVideo(ctx, field)
		case "updateViews":
			out.Values[i] = ec._Mutation_updateViews(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLike":
			out.Values[i] = ec._Mutation_updateLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDislike":
			out.Values[i] = ec._Mutation_updateDislike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDescription":
			out.Values[i] = ec._Mutation_updateDescription(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRestriction":
			out.Values[i] = ec._Mutation_updateRestriction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePremiumVideo":
			out.Values[i] = ec._Mutation_updatePremiumVideo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoType":
			out.Values[i] = ec._Mutation_updateVideoType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideo":
			out.Values[i] = ec._Mutation_updateVideo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeVideo":
			out.Values[i] = ec._Mutation_removeVideo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createVideoLikeVali":
			out.Values[i] = ec._Mutation_createVideoLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoLikeVali":
			out.Values[i] = ec._Mutation_updateVideoLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoDislikeVali":
			out.Values[i] = ec._Mutation_updateVideoDislikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVideoLikeVali":
			out.Values[i] = ec._Mutation_deleteVideoLikeVali(ctx, field)
		case "createVideoReply":
			out.Values[i] = ec._Mutation_createVideoReply(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyLikes":
			out.Values[i] = ec._Mutation_updateReplyLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyDislikes":
			out.Values[i] = ec._Mutation_updateReplyDislikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyDescription":
			out.Values[i] = ec._Mutation_updateReplyDescription(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReply":
			out.Values[i] = ec._Mutation_deleteReply(ctx, field)
		case "createNewVideoReplyLikeVali":
			out.Values[i] = ec._Mutation_createNewVideoReplyLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoReplyLikeVali":
			out.Values[i] = ec._Mutation_updateVideoReplyLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoReplyDislikeVali":
			out.Values[i] = ec._Mutation_updateVideoReplyDislikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVideoReplyLikeVali":
			out.Values[i] = ec._Mutation_deleteVideoReplyLikeVali(ctx, field)
		case "createNewVideoReplyRepliesLikeVali":
			out.Values[i] = ec._Mutation_createNewVideoReplyRepliesLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideReplyRepliesLikeVali":
			out.Values[i] = ec._Mutation_updateVideReplyRepliesLikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVideoReplyRepliesDislikeVali":
			out.Values[i] = ec._Mutation_updateVideoReplyRepliesDislikeVali(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVideoReplyRepliesLikeVali":
			out.Values[i] = ec._Mutation_deleteVideoReplyRepliesLikeVali(ctx, field)
		case "deleteListVideoReplyReplyLikeVali":
			out.Values[i] = ec._Mutation_deleteListVideoReplyReplyLikeVali(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var playlistImplementors = []string{"Playlist"}

func (ec *executionContext) _Playlist(ctx context.Context, sel ast.SelectionSet, obj *model.Playlist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playlistImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Playlist")
		case "playlistID":
			out.Values[i] = ec._Playlist_playlistID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._Playlist_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoID":
			out.Values[i] = ec._Playlist_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "playlistHeader":
			out.Values[i] = ec._Playlist_playlistHeader(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "playlistType":
			out.Values[i] = ec._Playlist_playlistType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Playlist_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityWeight":
			out.Values[i] = ec._Playlist_priorityWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "datePublish":
			out.Values[i] = ec._Playlist_datePublish(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateAddToPlaylist":
			out.Values[i] = ec._Playlist_dateAddToPlaylist(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "views":
			out.Values[i] = ec._Playlist_views(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalVideo":
			out.Values[i] = ec._Playlist_totalVideo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "retrievePlaylistSub":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePlaylistSub(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrieveAllPlaylistSubs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveAllPlaylistSubs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getChannel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChannel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getChannelId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChannelId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "channelCommunities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelCommunities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "channelCommunity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelCommunity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "channelCommunityVali":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelCommunityVali(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrieveLinks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveLinks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlists":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlists(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlistsPublic":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlistsPublic(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "priorityNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_priorityNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlist":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlistListVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlistListVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlistsRandom":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlistsRandom(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "playlistsByKeyword":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playlistsByKeyword(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "replyReply":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_replyReply(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listReplyReply":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listReplyReply(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Users(ctx, field)
				return res
			})
		case "userById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listUsers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserByKeyword":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserByKeyword(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userSubscribes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userSubscribes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "channelSubscribe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelSubscribe(ctx, field)
				return res
			})
		case "getChannelSubscribe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChannelSubscribe(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Videos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Videos(ctx, field)
				return res
			})
		case "listVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoByLocation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoByLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoByLocationSort":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoByLocationSort(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoByCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoByCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoByUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoByUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoTotalViews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoTotalViews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "premiumVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_premiumVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getLastVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLastVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getFiveRandomVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFiveRandomVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVideoByKeyword":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVideoByKeyword(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVideoByKeywordTopFive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVideoByKeywordTopFive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrieveAllVideos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveAllVideos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoLikeVali":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoLikeVali(ctx, field)
				return res
			})
		case "videoReplies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoReplies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoReply":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoReply(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoReplyLikeVali":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoReplyLikeVali(ctx, field)
				return res
			})
		case "videoReplyRepliesLikeVali":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videoReplyRepliesLikeVali(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var replyRepliesImplementors = []string{"ReplyReplies"}

func (ec *executionContext) _ReplyReplies(ctx context.Context, sel ast.SelectionSet, obj *model.ReplyReplies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, replyRepliesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReplyReplies")
		case "replyRepliesID":
			out.Values[i] = ec._ReplyReplies_replyRepliesID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "replyID":
			out.Values[i] = ec._ReplyReplies_replyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReplyReplies_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "like":
			out.Values[i] = ec._ReplyReplies_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dislike":
			out.Values[i] = ec._ReplyReplies_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "day":
			out.Values[i] = ec._ReplyReplies_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "month":
			out.Values[i] = ec._ReplyReplies_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "year":
			out.Values[i] = ec._ReplyReplies_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ReplyReplies_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "premium":
			out.Values[i] = ec._User_premium(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":
			out.Values[i] = ec._User_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscribers":
			out.Values[i] = ec._User_subscribers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restriction":
			out.Values[i] = ec._User_restriction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "premiumDayCount":
			out.Values[i] = ec._User_premiumDayCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnail":
			out.Values[i] = ec._User_thumbnail(ctx, field, obj)
		case "date":
			out.Values[i] = ec._User_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoImplementors = []string{"Video"}

func (ec *executionContext) _Video(ctx context.Context, sel ast.SelectionSet, obj *model.Video) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Video")
		case "videoID":
			out.Values[i] = ec._Video_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Video_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "title":
			out.Values[i] = ec._Video_title(ctx, field, obj)
		case "thumbnail":
			out.Values[i] = ec._Video_thumbnail(ctx, field, obj)
		case "views":
			out.Values[i] = ec._Video_views(ctx, field, obj)
		case "day":
			out.Values[i] = ec._Video_day(ctx, field, obj)
		case "month":
			out.Values[i] = ec._Video_month(ctx, field, obj)
		case "year":
			out.Values[i] = ec._Video_year(ctx, field, obj)
		case "like":
			out.Values[i] = ec._Video_like(ctx, field, obj)
		case "dislike":
			out.Values[i] = ec._Video_dislike(ctx, field, obj)
		case "descriptions":
			out.Values[i] = ec._Video_descriptions(ctx, field, obj)
		case "sourceLink":
			out.Values[i] = ec._Video_sourceLink(ctx, field, obj)
		case "category":
			out.Values[i] = ec._Video_category(ctx, field, obj)
		case "videoLength":
			out.Values[i] = ec._Video_videoLength(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Video_location(ctx, field, obj)
		case "restriction":
			out.Values[i] = ec._Video_restriction(ctx, field, obj)
		case "premium":
			out.Values[i] = ec._Video_premium(ctx, field, obj)
		case "typePub":
			out.Values[i] = ec._Video_typePub(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "videoReply":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Video_videoReply(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoLikeValiImplementors = []string{"VideoLikeVali"}

func (ec *executionContext) _VideoLikeVali(ctx context.Context, sel ast.SelectionSet, obj *model.VideoLikeVali) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoLikeValiImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoLikeVali")
		case "userID":
			out.Values[i] = ec._VideoLikeVali_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoID":
			out.Values[i] = ec._VideoLikeVali_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "like":
			out.Values[i] = ec._VideoLikeVali_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dislike":
			out.Values[i] = ec._VideoLikeVali_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoReplyImplementors = []string{"VideoReply"}

func (ec *executionContext) _VideoReply(ctx context.Context, sel ast.SelectionSet, obj *model.VideoReply) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoReplyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoReply")
		case "replyID":
			out.Values[i] = ec._VideoReply_replyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VideoReply_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "videoID":
			out.Values[i] = ec._VideoReply_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "likes":
			out.Values[i] = ec._VideoReply_likes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "day":
			out.Values[i] = ec._VideoReply_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "month":
			out.Values[i] = ec._VideoReply_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "year":
			out.Values[i] = ec._VideoReply_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dislikes":
			out.Values[i] = ec._VideoReply_dislikes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._VideoReply_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "replyReplies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VideoReply_replyReplies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoReplyLikeValiImplementors = []string{"VideoReplyLikeVali"}

func (ec *executionContext) _VideoReplyLikeVali(ctx context.Context, sel ast.SelectionSet, obj *model.VideoReplyLikeVali) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoReplyLikeValiImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoReplyLikeVali")
		case "userID":
			out.Values[i] = ec._VideoReplyLikeVali_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoID":
			out.Values[i] = ec._VideoReplyLikeVali_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replyID":
			out.Values[i] = ec._VideoReplyLikeVali_replyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "like":
			out.Values[i] = ec._VideoReplyLikeVali_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dislike":
			out.Values[i] = ec._VideoReplyLikeVali_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoReplyRepliesLikeValiImplementors = []string{"VideoReplyRepliesLikeVali"}

func (ec *executionContext) _VideoReplyRepliesLikeVali(ctx context.Context, sel ast.SelectionSet, obj *model.VideoReplyRepliesLikeVali) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoReplyRepliesLikeValiImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoReplyRepliesLikeVali")
		case "videoReplyRepliesLikeValiID":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_videoReplyRepliesLikeValiID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replyRepliesID":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_replyRepliesID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replyID":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_replyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoID":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_videoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "like":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dislike":
			out.Values[i] = ec._VideoReplyRepliesLikeVali_dislike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var channelLinkImplementors = []string{"channelLink"}

func (ec *executionContext) _channelLink(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelLinkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("channelLink")
		case "channelLinkID":
			out.Values[i] = ec._channelLink_channelLinkID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._channelLink_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":
			out.Values[i] = ec._channelLink_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var playlistSubscribeImplementors = []string{"playlistSubscribe"}

func (ec *executionContext) _playlistSubscribe(ctx context.Context, sel ast.SelectionSet, obj *model.PlaylistSubscribe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playlistSubscribeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("playlistSubscribe")
		case "playlistID":
			out.Values[i] = ec._playlistSubscribe_playlistID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._playlistSubscribe_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscribe":
			out.Values[i] = ec._playlistSubscribe_subscribe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSubscribeImplementors = []string{"userSubscribe"}

func (ec *executionContext) _userSubscribe(ctx context.Context, sel ast.SelectionSet, obj *model.UserSubscribe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSubscribeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("userSubscribe")
		case "userID":
			out.Values[i] = ec._userSubscribe_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channelID":
			out.Values[i] = ec._userSubscribe_channelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscribe":
			out.Values[i] = ec._userSubscribe_subscribe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channelUserID":
			out.Values[i] = ec._userSubscribe_channelUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNChannel2TPABackEndᚋgraphᚋmodelᚐChannel(ctx context.Context, sel ast.SelectionSet, v model.Channel) graphql.Marshaler {
	return ec._Channel(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannel2ᚖTPABackEndᚋgraphᚋmodelᚐChannel(ctx context.Context, sel ast.SelectionSet, v *model.Channel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Channel(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelCommunity2TPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx context.Context, sel ast.SelectionSet, v model.ChannelCommunity) graphql.Marshaler {
	return ec._ChannelCommunity(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelCommunity2ᚕᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelCommunity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNChannelCommunity2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunity(ctx context.Context, sel ast.SelectionSet, v *model.ChannelCommunity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ChannelCommunity(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelCommunityVali2TPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx context.Context, sel ast.SelectionSet, v model.ChannelCommunityVali) graphql.Marshaler {
	return ec._ChannelCommunityVali(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐChannelCommunityVali(ctx context.Context, sel ast.SelectionSet, v *model.ChannelCommunityVali) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ChannelCommunityVali(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.marshalNInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalNPlaylist2TPABackEndᚋgraphᚋmodelᚐPlaylist(ctx context.Context, sel ast.SelectionSet, v model.Playlist) graphql.Marshaler {
	return ec._Playlist(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlaylist2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Playlist) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPlaylist2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylist(ctx context.Context, sel ast.SelectionSet, v *model.Playlist) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Playlist(ctx, sel, v)
}

func (ec *executionContext) marshalNReplyReplies2TPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx context.Context, sel ast.SelectionSet, v model.ReplyReplies) graphql.Marshaler {
	return ec._ReplyReplies(ctx, sel, &v)
}

func (ec *executionContext) marshalNReplyReplies2ᚕᚖTPABackEndᚋgraphᚋmodelᚐReplyRepliesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ReplyReplies) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNReplyReplies2ᚖTPABackEndᚋgraphᚋmodelᚐReplyReplies(ctx context.Context, sel ast.SelectionSet, v *model.ReplyReplies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReplyReplies(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2TPABackEndᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNVideo2TPABackEndᚋgraphᚋmodelᚐVideo(ctx context.Context, sel ast.SelectionSet, v model.Video) graphql.Marshaler {
	return ec._Video(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideo2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Video) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx context.Context, sel ast.SelectionSet, v *model.Video) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Video(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoLikeVali2TPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx context.Context, sel ast.SelectionSet, v model.VideoLikeVali) graphql.Marshaler {
	return ec._VideoLikeVali(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx context.Context, sel ast.SelectionSet, v *model.VideoLikeVali) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoLikeVali(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoReply2TPABackEndᚋgraphᚋmodelᚐVideoReply(ctx context.Context, sel ast.SelectionSet, v model.VideoReply) graphql.Marshaler {
	return ec._VideoReply(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoReply2ᚕᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VideoReply) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVideoReply2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReply(ctx context.Context, sel ast.SelectionSet, v *model.VideoReply) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoReply(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoReplyLikeVali2TPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx context.Context, sel ast.SelectionSet, v model.VideoReplyLikeVali) graphql.Marshaler {
	return ec._VideoReplyLikeVali(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx context.Context, sel ast.SelectionSet, v *model.VideoReplyLikeVali) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoReplyLikeVali(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoReplyRepliesLikeVali2TPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx context.Context, sel ast.SelectionSet, v model.VideoReplyRepliesLikeVali) graphql.Marshaler {
	return ec._VideoReplyRepliesLikeVali(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyRepliesLikeVali(ctx context.Context, sel ast.SelectionSet, v *model.VideoReplyRepliesLikeVali) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoReplyRepliesLikeVali(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNchannelLink2TPABackEndᚋgraphᚋmodelᚐChannelLink(ctx context.Context, sel ast.SelectionSet, v model.ChannelLink) graphql.Marshaler {
	return ec._channelLink(ctx, sel, &v)
}

func (ec *executionContext) marshalNchannelLink2ᚕᚖTPABackEndᚋgraphᚋmodelᚐChannelLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelLink) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNchannelLink2ᚖTPABackEndᚋgraphᚋmodelᚐChannelLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNchannelLink2ᚖTPABackEndᚋgraphᚋmodelᚐChannelLink(ctx context.Context, sel ast.SelectionSet, v *model.ChannelLink) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._channelLink(ctx, sel, v)
}

func (ec *executionContext) unmarshalNnewChannelCommunity2TPABackEndᚋgraphᚋmodelᚐNewChannelCommunity(ctx context.Context, v interface{}) (model.NewChannelCommunity, error) {
	return ec.unmarshalInputnewChannelCommunity(ctx, v)
}

func (ec *executionContext) unmarshalNnewChannelLink2TPABackEndᚋgraphᚋmodelᚐNewChannelLink(ctx context.Context, v interface{}) (model.NewChannelLink, error) {
	return ec.unmarshalInputnewChannelLink(ctx, v)
}

func (ec *executionContext) unmarshalNnewPlaylist2TPABackEndᚋgraphᚋmodelᚐNewPlaylist(ctx context.Context, v interface{}) (model.NewPlaylist, error) {
	return ec.unmarshalInputnewPlaylist(ctx, v)
}

func (ec *executionContext) unmarshalNnewPlaylistSubscribe2TPABackEndᚋgraphᚋmodelᚐNewPlaylistSubscribe(ctx context.Context, v interface{}) (model.NewPlaylistSubscribe, error) {
	return ec.unmarshalInputnewPlaylistSubscribe(ctx, v)
}

func (ec *executionContext) unmarshalNnewReplyReplies2TPABackEndᚋgraphᚋmodelᚐNewReplyReplies(ctx context.Context, v interface{}) (model.NewReplyReplies, error) {
	return ec.unmarshalInputnewReplyReplies(ctx, v)
}

func (ec *executionContext) unmarshalNnewVideoReply2TPABackEndᚋgraphᚋmodelᚐNewVideoReply(ctx context.Context, v interface{}) (model.NewVideoReply, error) {
	return ec.unmarshalInputnewVideoReply(ctx, v)
}

func (ec *executionContext) unmarshalNnewVideoReplyLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoReplyLikeVali(ctx context.Context, v interface{}) (model.NewVideoReplyLikeVali, error) {
	return ec.unmarshalInputnewVideoReplyLikeVali(ctx, v)
}

func (ec *executionContext) unmarshalNnewVideoToPlaylist2TPABackEndᚋgraphᚋmodelᚐNewVideoToPlaylist(ctx context.Context, v interface{}) (model.NewVideoToPlaylist, error) {
	return ec.unmarshalInputnewVideoToPlaylist(ctx, v)
}

func (ec *executionContext) marshalNplaylistSubscribe2TPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx context.Context, sel ast.SelectionSet, v model.PlaylistSubscribe) graphql.Marshaler {
	return ec._playlistSubscribe(ctx, sel, &v)
}

func (ec *executionContext) marshalNplaylistSubscribe2ᚕᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PlaylistSubscribe) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNplaylistSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNplaylistSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐPlaylistSubscribe(ctx context.Context, sel ast.SelectionSet, v *model.PlaylistSubscribe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._playlistSubscribe(ctx, sel, v)
}

func (ec *executionContext) marshalNuserSubscribe2TPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx context.Context, sel ast.SelectionSet, v model.UserSubscribe) graphql.Marshaler {
	return ec._userSubscribe(ctx, sel, &v)
}

func (ec *executionContext) marshalNuserSubscribe2ᚕᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserSubscribe) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx context.Context, sel ast.SelectionSet, v *model.UserSubscribe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._userSubscribe(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOUser2TPABackEndᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚖTPABackEndᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOVideo2TPABackEndᚋgraphᚋmodelᚐVideo(ctx context.Context, sel ast.SelectionSet, v model.Video) graphql.Marshaler {
	return ec._Video(ctx, sel, &v)
}

func (ec *executionContext) marshalOVideo2ᚖTPABackEndᚋgraphᚋmodelᚐVideo(ctx context.Context, sel ast.SelectionSet, v *model.Video) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Video(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoLikeVali2TPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx context.Context, sel ast.SelectionSet, v model.VideoLikeVali) graphql.Marshaler {
	return ec._VideoLikeVali(ctx, sel, &v)
}

func (ec *executionContext) marshalOVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoLikeVali(ctx context.Context, sel ast.SelectionSet, v *model.VideoLikeVali) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoLikeVali(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoReplyLikeVali2TPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx context.Context, sel ast.SelectionSet, v model.VideoReplyLikeVali) graphql.Marshaler {
	return ec._VideoReplyLikeVali(ctx, sel, &v)
}

func (ec *executionContext) marshalOVideoReplyLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐVideoReplyLikeVali(ctx context.Context, sel ast.SelectionSet, v *model.VideoReplyLikeVali) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoReplyLikeVali(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOnewChannel2TPABackEndᚋgraphᚋmodelᚐNewChannel(ctx context.Context, v interface{}) (model.NewChannel, error) {
	return ec.unmarshalInputnewChannel(ctx, v)
}

func (ec *executionContext) unmarshalOnewChannel2ᚖTPABackEndᚋgraphᚋmodelᚐNewChannel(ctx context.Context, v interface{}) (*model.NewChannel, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewChannel2TPABackEndᚋgraphᚋmodelᚐNewChannel(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewUser2TPABackEndᚋgraphᚋmodelᚐNewUser(ctx context.Context, v interface{}) (model.NewUser, error) {
	return ec.unmarshalInputnewUser(ctx, v)
}

func (ec *executionContext) unmarshalOnewUser2ᚖTPABackEndᚋgraphᚋmodelᚐNewUser(ctx context.Context, v interface{}) (*model.NewUser, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewUser2TPABackEndᚋgraphᚋmodelᚐNewUser(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewUserSubscribe2TPABackEndᚋgraphᚋmodelᚐNewUserSubscribe(ctx context.Context, v interface{}) (model.NewUserSubscribe, error) {
	return ec.unmarshalInputnewUserSubscribe(ctx, v)
}

func (ec *executionContext) unmarshalOnewUserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐNewUserSubscribe(ctx context.Context, v interface{}) (*model.NewUserSubscribe, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewUserSubscribe2TPABackEndᚋgraphᚋmodelᚐNewUserSubscribe(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewVideo2TPABackEndᚋgraphᚋmodelᚐNewVideo(ctx context.Context, v interface{}) (model.NewVideo, error) {
	return ec.unmarshalInputnewVideo(ctx, v)
}

func (ec *executionContext) unmarshalOnewVideo2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideo(ctx context.Context, v interface{}) (*model.NewVideo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewVideo2TPABackEndᚋgraphᚋmodelᚐNewVideo(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewVideoLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoLikeVali(ctx context.Context, v interface{}) (model.NewVideoLikeVali, error) {
	return ec.unmarshalInputnewVideoLikeVali(ctx, v)
}

func (ec *executionContext) unmarshalOnewVideoLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideoLikeVali(ctx context.Context, v interface{}) (*model.NewVideoLikeVali, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewVideoLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoLikeVali(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewVideoReplyRepliesLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoReplyRepliesLikeVali(ctx context.Context, v interface{}) (model.NewVideoReplyRepliesLikeVali, error) {
	return ec.unmarshalInputnewVideoReplyRepliesLikeVali(ctx, v)
}

func (ec *executionContext) unmarshalOnewVideoReplyRepliesLikeVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewVideoReplyRepliesLikeVali(ctx context.Context, v interface{}) (*model.NewVideoReplyRepliesLikeVali, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewVideoReplyRepliesLikeVali2TPABackEndᚋgraphᚋmodelᚐNewVideoReplyRepliesLikeVali(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOnewchannelCommunityVali2TPABackEndᚋgraphᚋmodelᚐNewchannelCommunityVali(ctx context.Context, v interface{}) (model.NewchannelCommunityVali, error) {
	return ec.unmarshalInputnewchannelCommunityVali(ctx, v)
}

func (ec *executionContext) unmarshalOnewchannelCommunityVali2ᚖTPABackEndᚋgraphᚋmodelᚐNewchannelCommunityVali(ctx context.Context, v interface{}) (*model.NewchannelCommunityVali, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOnewchannelCommunityVali2TPABackEndᚋgraphᚋmodelᚐNewchannelCommunityVali(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOuserSubscribe2TPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx context.Context, sel ast.SelectionSet, v model.UserSubscribe) graphql.Marshaler {
	return ec._userSubscribe(ctx, sel, &v)
}

func (ec *executionContext) marshalOuserSubscribe2ᚖTPABackEndᚋgraphᚋmodelᚐUserSubscribe(ctx context.Context, sel ast.SelectionSet, v *model.UserSubscribe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._userSubscribe(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
